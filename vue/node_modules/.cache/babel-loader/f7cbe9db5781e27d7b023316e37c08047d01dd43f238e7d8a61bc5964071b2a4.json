{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"FrontLayout\",\n  data() {\n    return {\n      top: \"\",\n      notice: [],\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || \"{}\"),\n      showAIDialog: false,\n      question: \"\",\n      chatHistory: [],\n      loading: false\n    };\n  },\n  mounted() {\n    this.loadNotice();\n  },\n  methods: {\n    // ... 保持原有的其他方法不变 ...\n\n    sendQuestion() {\n      if (!this.question.trim()) {\n        this.$message.warning(\"请输入问题\");\n        return;\n      }\n\n      // 记录用户问题\n      const userQuestion = this.question.trim();\n      this.chatHistory.push({\n        type: 'user',\n        content: userQuestion\n      });\n\n      // 清空输入框\n      this.question = '';\n\n      // 添加加载中消息\n      const loadingIndex = this.chatHistory.length;\n      this.chatHistory.push({\n        type: 'ai',\n        content: '正在思考中...',\n        loading: true\n      });\n      console.log('发送问题到AI服务:', userQuestion);\n\n      // 调用后端API\n      this.$request.post('/api/ai/ask', {\n        question: userQuestion\n      }, {\n        timeout: 150000 // 设置请求超时为150秒\n      }).then(res => {\n        console.log('AI回复:', res);\n\n        // 移除加载中消息\n        if (this.chatHistory[loadingIndex] && this.chatHistory[loadingIndex].loading) {\n          // 替换加载中消息为实际回复\n          this.$set(this.chatHistory, loadingIndex, {\n            type: 'ai',\n            content: res.data || '抱歉，我暂时无法回答这个问题。'\n          });\n        }\n\n        // 自动滚动到底部\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      }).catch(err => {\n        console.error('AI请求失败:', err);\n\n        // 移除加载中消息，显示错误信息\n        if (this.chatHistory[loadingIndex] && this.chatHistory[loadingIndex].loading) {\n          // 获取详细错误信息\n          let errorMsg = '服务暂时不可用，请稍后再试';\n          if (err.response && err.response.data) {\n            errorMsg = `请求出错: ${err.response.data.message || err.response.data}`;\n          } else if (err.message && err.message.includes('timeout')) {\n            errorMsg = '请求超时，可能是问题太复杂，请稍后再试或尝试简化问题';\n          }\n\n          // 替换加载中消息为错误信息\n          this.$set(this.chatHistory, loadingIndex, {\n            type: 'ai',\n            content: errorMsg,\n            isError: true\n          });\n        }\n\n        // 自动滚动到底部\n        this.$nextTick(() => {\n          this.scrollToBottom();\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","top","notice","user","JSON","parse","localStorage","getItem","showAIDialog","question","chatHistory","loading","mounted","loadNotice","methods","sendQuestion","trim","$message","warning","userQuestion","push","type","content","loadingIndex","length","console","log","$request","post","timeout","then","res","$set","$nextTick","scrollToBottom","catch","err","error","errorMsg","response","message","includes","isError"],"sources":["src/views/Front.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- AI 客服按钮 -->\r\n    <el-button\r\n      type=\"primary\"\r\n      @click=\"showAIDialog = true\"\r\n      class=\"ai-service-btn\"\r\n    >\r\n      <i class=\"el-icon-service\"></i> AI 客服\r\n    </el-button>\r\n\r\n    <!-- AI 客服对话框 -->\r\n    <el-dialog\r\n      :visible.sync=\"showAIDialog\"\r\n      title=\"AI 智能客服\"\r\n      width=\"50%\"\r\n      :close-on-click-modal=\"false\"\r\n    >\r\n      <div class=\"ai-chat-container\">\r\n        <!-- 聊天记录区域 -->\r\n        <div class=\"chat-messages\" ref=\"chatContainer\">\r\n          <div v-if=\"chatHistory.length === 0\" class=\"welcome-message\">\r\n            您好！我是BuyCycle的AI客服助手，请问有什么可以帮您？\r\n          </div>\r\n          <div\r\n            v-for=\"(msg, index) in chatHistory\"\r\n            :key=\"index\"\r\n            :class=\"['message', msg.type]\"\r\n          >\r\n            <div class=\"message-content\">{{ msg.content }}</div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- 输入区域 -->\r\n        <div class=\"chat-input\">\r\n          <el-input\r\n            v-model=\"question\"\r\n            type=\"textarea\"\r\n            :rows=\"3\"\r\n            placeholder=\"请输入您的问题\"\r\n            @keyup.enter.native.exact=\"sendQuestion\"\r\n          ></el-input>\r\n          <el-button\r\n            type=\"primary\"\r\n            @click=\"sendQuestion\"\r\n            :loading=\"loading\"\r\n            style=\"margin-top: 10px\"\r\n          >\r\n            {{ loading ? \"正在思考...\" : \"发送\" }}\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!--主体-->\r\n    <div class=\"main-body\">\r\n      <router-view ref=\"child\" @update:user=\"updateUser\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"FrontLayout\",\r\n\r\n  data() {\r\n    return {\r\n      top: \"\",\r\n      notice: [],\r\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || \"{}\"),\r\n      showAIDialog: false,\r\n      question: \"\",\r\n      chatHistory: [],\r\n      loading: false,\r\n    };\r\n  },\r\n\r\n  mounted() {\r\n    this.loadNotice();\r\n  },\r\n\r\n  methods: {\r\n    // ... 保持原有的其他方法不变 ...\r\n\r\n    sendQuestion() {\r\n      if (!this.question.trim()) {\r\n        this.$message.warning(\"请输入问题\");\r\n        return;\r\n      }\r\n      \r\n      // 记录用户问题\r\n      const userQuestion = this.question.trim();\r\n      this.chatHistory.push({\r\n        type: 'user',\r\n        content: userQuestion\r\n      });\r\n      \r\n      // 清空输入框\r\n      this.question = '';\r\n      \r\n      // 添加加载中消息\r\n      const loadingIndex = this.chatHistory.length;\r\n      this.chatHistory.push({\r\n        type: 'ai',\r\n        content: '正在思考中...',\r\n        loading: true\r\n      });\r\n      \r\n      console.log('发送问题到AI服务:', userQuestion);\r\n      \r\n      // 调用后端API\r\n      this.$request.post('/api/ai/ask', {\r\n        question: userQuestion\r\n      }, {\r\n        timeout: 150000  // 设置请求超时为150秒\r\n      }).then(res => {\r\n        console.log('AI回复:', res);\r\n        \r\n        // 移除加载中消息\r\n        if (this.chatHistory[loadingIndex] && this.chatHistory[loadingIndex].loading) {\r\n          // 替换加载中消息为实际回复\r\n          this.$set(this.chatHistory, loadingIndex, {\r\n            type: 'ai',\r\n            content: res.data || '抱歉，我暂时无法回答这个问题。'\r\n          });\r\n        }\r\n        \r\n        // 自动滚动到底部\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom();\r\n        });\r\n      }).catch(err => {\r\n        console.error('AI请求失败:', err);\r\n        \r\n        // 移除加载中消息，显示错误信息\r\n        if (this.chatHistory[loadingIndex] && this.chatHistory[loadingIndex].loading) {\r\n          // 获取详细错误信息\r\n          let errorMsg = '服务暂时不可用，请稍后再试';\r\n          if (err.response && err.response.data) {\r\n            errorMsg = `请求出错: ${err.response.data.message || err.response.data}`;\r\n          } else if (err.message && err.message.includes('timeout')) {\r\n            errorMsg = '请求超时，可能是问题太复杂，请稍后再试或尝试简化问题';\r\n          }\r\n          \r\n          // 替换加载中消息为错误信息\r\n          this.$set(this.chatHistory, loadingIndex, {\r\n            type: 'ai',\r\n            content: errorMsg,\r\n            isError: true\r\n          });\r\n        }\r\n        \r\n        // 自动滚动到底部\r\n        this.$nextTick(() => {\r\n          this.scrollToBottom();\r\n        });\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import \"@/assets/css/front.css\";\r\n\r\n/* AI客服相关样式 */\r\n.ai-service-btn {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  z-index: 999;\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  padding: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  font-size: 12px;\r\n}\r\n\r\n.ai-service-btn i {\r\n  font-size: 24px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.ai-chat-container {\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  background: #f5f7fa;\r\n  border-radius: 4px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.welcome-message {\r\n  text-align: center;\r\n  color: #909399;\r\n  padding: 20px;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.message.user {\r\n  align-items: flex-end;\r\n}\r\n\r\n.message.ai {\r\n  align-items: flex-start;\r\n}\r\n\r\n.message-content {\r\n  max-width: 80%;\r\n  padding: 10px 15px;\r\n  border-radius: 4px;\r\n  word-break: break-word;\r\n}\r\n\r\n.user .message-content {\r\n  background: #409eff;\r\n  color: white;\r\n  border-radius: 15px 15px 0 15px;\r\n}\r\n\r\n.ai .message-content {\r\n  background: white;\r\n  color: #333;\r\n  border-radius: 15px 15px 15px 0;\r\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\r\n}\r\n\r\n.chat-input {\r\n  padding: 10px 0;\r\n}\r\n</style>"],"mappings":";AA8DA;EACAA,IAAA;EAEAC,KAAA;IACA;MACAC,GAAA;MACAC,MAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,YAAA;MACAC,QAAA;MACAC,WAAA;MACAC,OAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,UAAA;EACA;EAEAC,OAAA;IACA;;IAEAC,aAAA;MACA,UAAAN,QAAA,CAAAO,IAAA;QACA,KAAAC,QAAA,CAAAC,OAAA;QACA;MACA;;MAEA;MACA,MAAAC,YAAA,QAAAV,QAAA,CAAAO,IAAA;MACA,KAAAN,WAAA,CAAAU,IAAA;QACAC,IAAA;QACAC,OAAA,EAAAH;MACA;;MAEA;MACA,KAAAV,QAAA;;MAEA;MACA,MAAAc,YAAA,QAAAb,WAAA,CAAAc,MAAA;MACA,KAAAd,WAAA,CAAAU,IAAA;QACAC,IAAA;QACAC,OAAA;QACAX,OAAA;MACA;MAEAc,OAAA,CAAAC,GAAA,eAAAP,YAAA;;MAEA;MACA,KAAAQ,QAAA,CAAAC,IAAA;QACAnB,QAAA,EAAAU;MACA;QACAU,OAAA;MACA,GAAAC,IAAA,CAAAC,GAAA;QACAN,OAAA,CAAAC,GAAA,UAAAK,GAAA;;QAEA;QACA,SAAArB,WAAA,CAAAa,YAAA,UAAAb,WAAA,CAAAa,YAAA,EAAAZ,OAAA;UACA;UACA,KAAAqB,IAAA,MAAAtB,WAAA,EAAAa,YAAA;YACAF,IAAA;YACAC,OAAA,EAAAS,GAAA,CAAA/B,IAAA;UACA;QACA;;QAEA;QACA,KAAAiC,SAAA;UACA,KAAAC,cAAA;QACA;MACA,GAAAC,KAAA,CAAAC,GAAA;QACAX,OAAA,CAAAY,KAAA,YAAAD,GAAA;;QAEA;QACA,SAAA1B,WAAA,CAAAa,YAAA,UAAAb,WAAA,CAAAa,YAAA,EAAAZ,OAAA;UACA;UACA,IAAA2B,QAAA;UACA,IAAAF,GAAA,CAAAG,QAAA,IAAAH,GAAA,CAAAG,QAAA,CAAAvC,IAAA;YACAsC,QAAA,YAAAF,GAAA,CAAAG,QAAA,CAAAvC,IAAA,CAAAwC,OAAA,IAAAJ,GAAA,CAAAG,QAAA,CAAAvC,IAAA;UACA,WAAAoC,GAAA,CAAAI,OAAA,IAAAJ,GAAA,CAAAI,OAAA,CAAAC,QAAA;YACAH,QAAA;UACA;;UAEA;UACA,KAAAN,IAAA,MAAAtB,WAAA,EAAAa,YAAA;YACAF,IAAA;YACAC,OAAA,EAAAgB,QAAA;YACAI,OAAA;UACA;QACA;;QAEA;QACA,KAAAT,SAAA;UACA,KAAAC,cAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}