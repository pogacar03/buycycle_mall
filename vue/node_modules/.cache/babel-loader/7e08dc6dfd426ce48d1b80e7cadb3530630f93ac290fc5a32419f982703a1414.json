{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || \"{}\"),\n      ordersData: [],\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      form: {},\n      fromVisible: false,\n      loading: false,\n      rules: {},\n      // 添加缺少的rules属性\n      currentPayingOrderId: null\n    };\n  },\n  mounted() {\n    this.loadOrders(1);\n\n    // 添加对$bus的检查\n    if (this.$bus) {\n      this.$bus.$on(\"refreshOrders\", () => {\n        this.loadOrders(this.pageNum);\n      });\n    } else {\n      console.error(\"事件总线($bus)未初始化\");\n    }\n  },\n  beforeDestroy() {\n    // 添加对$bus的检查\n    if (this.$bus) {\n      this.$bus.$off(\"refreshOrders\");\n    }\n  },\n  // methods：本页面所有的点击事件或者其他函数定义区\n  methods: {\n    loadOrders(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n\n      // 显示加载状态\n      this.loading = true;\n      this.$request.get(\"/orders/selectPage\", {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          userId: this.user.id\n        }\n      }).then(res => {\n        this.loading = false;\n        if (res.code === \"200\") {\n          this.ordersData = res.data?.list || [];\n          console.log(\"原始订单数据:\", JSON.stringify(this.ordersData));\n\n          // 检查订单ID字段\n          this.ordersData.forEach((order, index) => {\n            // 输出每个订单的所有字段，查找订单ID字段\n            console.log(`订单${index}的所有字段:`, Object.keys(order));\n\n            // 检查并修复orderId字段\n            if (!order.orderId && order.order_id) {\n              order.orderId = order.order_id;\n              console.log(`修复订单ID: 使用order_id(${order.order_id})替代orderId`);\n            }\n\n            // 其他处理逻辑\n          });\n\n          // 确保returnStatus字段被正确转换为字符串\n          this.ordersData.forEach(order => {\n            if (order.returnStatus !== undefined) {\n              order.returnStatus = order.returnStatus.toString();\n            } else {\n              // 如果returnStatus不存在，设置默认值为\"0\"\n              order.returnStatus = \"0\";\n            }\n\n            // 添加日志查看每个订单的状态\n            console.log(`订单ID: ${order.orderId}, 状态: ${order.status}, 退款状态: ${order.returnStatus}`);\n\n            // 添加这部分以检查支付状态\n            console.log(`订单ID: ${order.orderId}, 状态: ${order.status}, 支付状态: ${order.payStatus}`);\n          });\n          this.total = res.data?.total || 0;\n          console.log(\"加载的订单数据总数:\", this.ordersData.length);\n        } else {\n          this.$message.error(res.msg || \"获取订单数据失败\");\n        }\n      }).catch(err => {\n        this.loading = false;\n        console.error(\"加载订单失败:\", err);\n        this.$message.error(\"获取订单数据失败: \" + (err.message || \"未知错误\"));\n      });\n    },\n    navTo(url) {\n      location.href = url;\n    },\n    del(id) {\n      this.$request.delete(\"/orders/delete/\" + id).then(res => {\n        if (res.code === \"200\") {\n          this.$message.success(\"删除成功\");\n          this.loadOrders(1);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    handleCurrentChange(pageNum) {\n      this.loadOrders(pageNum);\n    },\n    updateStatus(row, status) {\n      this.form = row;\n      this.form.status = status;\n      this.$request.put(\"/orders/update\", this.form).then(res => {\n        if (res.code === \"200\") {\n          this.$message.success(\"操作成功\");\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    addComment(row) {\n      this.fromVisible = true;\n      this.form = row;\n    },\n    save() {\n      let data = {\n        userId: this.user.id,\n        businessId: this.form.businessId,\n        goodsId: this.form.goodsId,\n        content: this.form.content\n      };\n      this.$request.post(\"/comment/add\", data).then(res => {\n        if (res.code === \"200\") {\n          this.$message.success(\"评价成功\");\n          this.fromVisible = false;\n          this.updateStatus(this.form, \"已评价\");\n          this.form = {};\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    handleReturn(row) {\n      console.log(\"准备跳转到退换申请页面\");\n      console.log(\"订单数据:\", row);\n\n      // 确保orderId不为空\n      if (!row.orderId) {\n        this.$message.error(\"订单ID不能为空，无法申请退换\");\n        return;\n      }\n\n      // 使用window.location.href直接跳转\n      const query = {\n        orderId: row.orderId || \"\",\n        goodsId: row.goodsId || \"\",\n        goodsName: row.goodsName || \"\",\n        goodsImg: row.goodsImg || \"\",\n        goodsPrice: row.goodsPrice || 0\n      };\n      console.log(\"跳转参数:\", query);\n      const queryString = Object.entries(query).map(([key, value]) => `${key}=${encodeURIComponent(value || \"\")}`).join(\"&\");\n      window.location.href = `/front/return/apply?${queryString}`;\n    },\n    payWithAlipay(row) {\n      console.log(\"开始支付流程，订单数据:\", row);\n      const orderId = row.orderId;\n      const amount = row.price;\n\n      // 保存当前支付的订单ID\n      this.currentPayingOrderId = orderId;\n\n      // 显示加载中提示\n      const loading = this.$loading({\n        lock: true,\n        text: \"正在获取支付表单...\",\n        spinner: \"el-icon-loading\",\n        background: \"rgba(0,0,0,0.7)\"\n      });\n      this.$request.post(\"/api/alipay/pay\", {\n        orderId: orderId,\n        amount: amount,\n        subject: \"订单支付-\" + orderId\n      }).then(res => {\n        loading.close(); // 关闭加载提示\n        console.log(\"支付接口返回:\", res);\n        if (res.code === \"200\") {\n          try {\n            // 方法1: 创建隐藏DIV显示表单并提交\n            const tempDiv = document.createElement(\"div\");\n            tempDiv.style.position = \"fixed\";\n            tempDiv.style.visibility = \"hidden\";\n            document.body.appendChild(tempDiv);\n            tempDiv.innerHTML = res.data;\n            console.log(\"生成的表单内容:\", tempDiv.innerHTML);\n\n            // 查找表单\n            const form = tempDiv.querySelector(\"form\");\n            if (form) {\n              console.log(\"找到支付表单, 准备提交\");\n\n              // 确保按钮可见\n              const submitBtn = form.querySelector('input[type=\"submit\"]');\n              if (submitBtn) {\n                submitBtn.style.display = \"block\";\n              }\n\n              // 由于已知支付宝沙箱可能有问题，直接使用内嵌表单显示\n              this.showFormInPage(res.data);\n\n              /* 注释原有的直接跳转代码，改用内嵌表单\r\n              // 在新窗口中打开支付表单\r\n              this.openPayForm(form);\r\n              */\n            } else {\n              // 方法2: 尝试执行内嵌脚本\n              const scriptContent = res.data.match(/<script>(.*?)<\\/script>/s);\n              if (scriptContent && scriptContent[1]) {\n                console.log(\"找到脚本内容，尝试执行\");\n\n                // 使用内嵌表单代替脚本执行\n                this.showFormInPage(res.data);\n              } else {\n                // 方法3: 最后的方法 - 直接在页面嵌入表单\n                this.showFormInPage(res.data);\n              }\n            }\n          } catch (e) {\n            console.error(\"处理支付表单出错:\", e);\n            // 直接显示在页面上\n            this.showFormInPage(res.data);\n          }\n        } else {\n          this.$message.error(res.msg || \"创建支付失败\");\n        }\n      }).catch(err => {\n        loading.close();\n        console.error(\"支付请求错误:\", err);\n        this.$message.error(\"支付请求失败: \" + (err.message || \"未知错误\"));\n      });\n    },\n    // 在页面上直接显示表单\n    showFormInPage(formHtml) {\n      // 创建一个模态框显示表单\n      const overlay = document.createElement(\"div\");\n      overlay.style.position = \"fixed\";\n      overlay.style.top = \"0\";\n      overlay.style.left = \"0\";\n      overlay.style.width = \"100%\";\n      overlay.style.height = \"100%\";\n      overlay.style.backgroundColor = \"rgba(0,0,0,0.5)\";\n      overlay.style.zIndex = \"9999\";\n      overlay.style.display = \"flex\";\n      overlay.style.justifyContent = \"center\";\n      overlay.style.alignItems = \"center\";\n      const modal = document.createElement(\"div\");\n      modal.style.backgroundColor = \"#fff\";\n      modal.style.padding = \"20px\";\n      modal.style.borderRadius = \"5px\";\n      modal.style.maxWidth = \"500px\";\n      modal.style.width = \"90%\";\n      modal.style.maxHeight = \"80vh\";\n      modal.style.overflow = \"auto\";\n      const header = document.createElement(\"div\");\n      header.style.display = \"flex\";\n      header.style.justifyContent = \"space-between\";\n      header.style.marginBottom = \"20px\";\n      const title = document.createElement(\"h3\");\n      title.textContent = \"支付宝支付\";\n      title.style.margin = \"0\";\n      const closeBtn = document.createElement(\"button\");\n      closeBtn.textContent = \"×\";\n      closeBtn.style.background = \"none\";\n      closeBtn.style.border = \"none\";\n      closeBtn.style.fontSize = \"20px\";\n      closeBtn.style.cursor = \"pointer\";\n      closeBtn.onclick = () => document.body.removeChild(overlay);\n      header.appendChild(title);\n      header.appendChild(closeBtn);\n      const content = document.createElement(\"div\");\n      content.innerHTML = formHtml;\n\n      // 添加网关错误提示\n      const errorNote = document.createElement(\"div\");\n      errorNote.style.margin = \"10px 0\";\n      errorNote.style.padding = \"10px\";\n      errorNote.style.backgroundColor = \"#FFF7E6\";\n      errorNote.style.border = \"1px solid #FFD591\";\n      errorNote.style.borderRadius = \"4px\";\n      errorNote.style.color = \"#D46B08\";\n      errorNote.style.fontSize = \"14px\";\n      errorNote.innerHTML = '<strong>提示：</strong>支付宝沙箱环境可能出现\"502 Bad Gateway\"错误，这是支付宝服务器问题，不影响系统功能测试。';\n\n      // 添加到内容前面\n      modal.appendChild(header);\n      modal.appendChild(errorNote);\n      modal.appendChild(content);\n\n      // 确保提交按钮可见\n      const submitBtn = content.querySelector('input[type=\"submit\"]');\n      if (submitBtn) {\n        submitBtn.style.display = \"block\";\n        submitBtn.style.margin = \"10px auto\";\n        submitBtn.style.padding = \"8px 15px\";\n        submitBtn.style.backgroundColor = \"#409EFF\";\n        submitBtn.style.color = \"#fff\";\n        submitBtn.style.border = \"none\";\n        submitBtn.style.borderRadius = \"4px\";\n        submitBtn.style.cursor = \"pointer\";\n\n        // 替换原始按钮 - 防止直接跳转导致502\n        const payBtn = document.createElement(\"button\");\n        payBtn.textContent = \"模拟支付完成\";\n        payBtn.style.margin = \"10px auto\";\n        payBtn.style.padding = \"8px 15px\";\n        payBtn.style.backgroundColor = \"#67C23A\";\n        payBtn.style.color = \"#fff\";\n        payBtn.style.border = \"none\";\n        payBtn.style.borderRadius = \"4px\";\n        payBtn.style.cursor = \"pointer\";\n        payBtn.style.display = \"block\";\n\n        // 点击模拟支付按钮\n        payBtn.onclick = () => {\n          // 显示支付中\n          const loadingInstance = this.$loading({\n            lock: true,\n            text: \"正在处理支付...\",\n            spinner: \"el-icon-loading\",\n            background: \"rgba(0, 0, 0, 0.7)\"\n          });\n\n          // 模拟支付完成过程\n          setTimeout(() => {\n            loadingInstance.close();\n            document.body.removeChild(overlay);\n            this.$message.success(\"支付模拟完成，订单状态已更新\");\n\n            // 修改当前订单状态\n            const currentOrder = this.ordersData.find(order => order.orderId === this.currentPayingOrderId);\n            if (currentOrder) {\n              currentOrder.status = \"待发货\";\n              currentOrder.payStatus = \"已支付\";\n              // 更新后端\n              this.updateStatus(currentOrder, \"待发货\");\n            }\n\n            // 刷新订单列表\n            this.loadOrders(this.pageNum);\n          }, 2000);\n        };\n\n        // 将模拟按钮添加到表单区域\n        content.appendChild(payBtn);\n      }\n      overlay.appendChild(modal);\n      document.body.appendChild(overlay);\n\n      // 设置刷新检查器\n      this.createRefreshChecker();\n    },\n    // 创建定时刷新检查器\n    createRefreshChecker() {\n      // 设置定时器，每隔一段时间刷新订单列表，检查订单是否已支付\n      const checkInterval = 5000; // 5秒检查一次\n      const maxChecks = 12; // 最多检查12次（约1分钟）\n      let checkCount = 0;\n      const checkPaymentStatus = setInterval(() => {\n        checkCount++;\n        console.log(`第${checkCount}次检查订单支付状态`);\n\n        // 刷新订单列表\n        this.loadOrders(this.pageNum);\n\n        // 如果达到最大检查次数，停止检查\n        if (checkCount >= maxChecks) {\n          clearInterval(checkPaymentStatus);\n          console.log(\"已完成订单状态检查\");\n        }\n      }, checkInterval);\n    },\n    // 显示支付宝网关错误提示\n    showGatewayErrorTip() {\n      this.$alert(\"支付宝沙箱环境暂时不可用，出现了502 Bad Gateway错误。这是支付宝沙箱服务器的问题，不影响系统功能测试。在实际生产环境中不会出现此问题。\", \"支付网关暂时不可用\", {\n        confirmButtonText: \"我知道了\",\n        type: \"warning\",\n        callback: () => {\n          this.$message({\n            type: \"info\",\n            message: \"您可以稍后再试，或者继续测试系统的其他功能\"\n          });\n        }\n      });\n    },\n    // 在新窗口中打开支付表单\n    openPayForm(form) {\n      try {\n        // 先显示提示\n        this.$message.success(\"正在跳转到支付页面，请稍等...\");\n\n        // 添加错误处理函数 - 当支付页面加载失败时执行\n        window.addEventListener(\"error\", event => {\n          if (event.target.tagName === \"IFRAME\" || event.target.tagName === \"IMG\") {\n            if (event.target.src && event.target.src.includes(\"alipay\")) {\n              console.error(\"支付宝页面加载失败:\", event);\n              this.showGatewayErrorTip();\n              return true; // 阻止默认处理\n            }\n          }\n        }, true);\n\n        // 在新窗口中打开并提交表单\n        form.target = \"_blank\";\n        setTimeout(() => {\n          form.submit();\n\n          // 5秒后提示用户可能的网关错误\n          setTimeout(() => {\n            this.showGatewayErrorTip();\n          }, 5000);\n        }, 500);\n\n        // 创建刷新检查定时器\n        this.createRefreshChecker();\n      } catch (e) {\n        console.error(\"打开支付表单失败:\", e);\n        this.$message.error(\"打开支付页面失败: \" + e.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","ordersData","pageNum","pageSize","total","form","fromVisible","loading","rules","currentPayingOrderId","mounted","loadOrders","$bus","$on","console","error","beforeDestroy","$off","methods","$request","get","params","userId","id","then","res","code","list","log","stringify","forEach","order","index","Object","keys","orderId","order_id","returnStatus","undefined","toString","status","payStatus","length","$message","msg","catch","err","message","navTo","url","location","href","del","delete","success","handleCurrentChange","updateStatus","row","put","addComment","save","businessId","goodsId","content","post","handleReturn","query","goodsName","goodsImg","goodsPrice","queryString","entries","map","key","value","encodeURIComponent","join","window","payWithAlipay","amount","price","$loading","lock","text","spinner","background","subject","close","tempDiv","document","createElement","style","position","visibility","body","appendChild","innerHTML","querySelector","submitBtn","display","showFormInPage","scriptContent","match","e","formHtml","overlay","top","left","width","height","backgroundColor","zIndex","justifyContent","alignItems","modal","padding","borderRadius","maxWidth","maxHeight","overflow","header","marginBottom","title","textContent","margin","closeBtn","border","fontSize","cursor","onclick","removeChild","errorNote","color","payBtn","loadingInstance","setTimeout","currentOrder","find","createRefreshChecker","checkInterval","maxChecks","checkCount","checkPaymentStatus","setInterval","clearInterval","showGatewayErrorTip","$alert","confirmButtonText","type","callback","openPayForm","addEventListener","event","target","tagName","src","includes","submit"],"sources":["src/views/front/Orders.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-content\">\r\n    <div\r\n      style=\"\r\n        width: 80%;\r\n        background-color: white;\r\n        margin: 30px auto;\r\n        border-radius: 20px;\r\n      \"\r\n    >\r\n      <div style=\"padding-bottom: 10px\">\r\n        <div\r\n          style=\"\r\n            font-size: 18px;\r\n            color: #000000ff;\r\n            line-height: 80px;\r\n            border-bottom: #cccccc 1px solid;\r\n          \"\r\n        >\r\n          <div style=\"margin-left: 20px\">\r\n            我的订单（{{ ordersData.length }} 个）\r\n          </div>\r\n        </div>\r\n        <div style=\"margin: 20px 0; padding: 0 50px\">\r\n          <div class=\"table\">\r\n            <el-table :data=\"ordersData\" stripe v-loading=\"loading\">\r\n              <el-table-column label=\"商品图片\" width=\"120px\">\r\n                <template v-slot=\"scope\">\r\n                  <el-image\r\n                    style=\"width: 80px; height: 60px; border-radius: 3px\"\r\n                    v-if=\"scope.row.goodsImg\"\r\n                    :src=\"scope.row.goodsImg\"\r\n                    :preview-src-list=\"[scope.row.goodsImg]\"\r\n                  ></el-image>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column\r\n                prop=\"orderId\"\r\n                label=\"订单编号\"\r\n              ></el-table-column>\r\n              <el-table-column\r\n                prop=\"goodsName\"\r\n                label=\"商品名称\"\r\n                :show-overflow-tooltip=\"true\"\r\n              >\r\n                <template v-slot=\"scope\">\r\n                  <a :href=\"'/front/detail?id=' + scope.row.goodsId\">{{\r\n                    scope.row.goodsName\r\n                  }}</a>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"businessName\" label=\"店铺名称\">\r\n                <template v-slot=\"scope\">\r\n                  <a :href=\"'/front/business?id=' + scope.row.businessId\">{{\r\n                    scope.row.businessName\r\n                  }}</a>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"goodsPrice\" label=\"商品价格\">\r\n                <template v-slot=\"scope\">\r\n                  {{ scope.row.goodsPrice }} / {{ scope.row.goodsUnit }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"num\" label=\"商品数量\"></el-table-column>\r\n              <el-table-column prop=\"price\" label=\"订单总价\"></el-table-column>\r\n              <el-table-column prop=\"username\" label=\"收货人\"></el-table-column>\r\n              <el-table-column\r\n                prop=\"useraddress\"\r\n                label=\"收货地址\"\r\n              ></el-table-column>\r\n              <el-table-column prop=\"phone\" label=\"联系电话\"></el-table-column>\r\n              <el-table-column prop=\"status\" label=\"订单状态\">\r\n                <template v-slot=\"scope\">\r\n                  <!-- 基本订单状态 -->\r\n                  <span>{{ scope.row.status }}</span>\r\n\r\n                  <!-- 退款/退货状态标签 -->\r\n                  <div style=\"margin-top: 5px\">\r\n                    <el-tag type=\"warning\" v-if=\"scope.row.returnStatus === '1'\"\r\n                      >退换处理中</el-tag\r\n                    >\r\n                    <el-tag type=\"success\" v-if=\"scope.row.returnStatus === '2'\"\r\n                      >退换已完成</el-tag\r\n                    >\r\n                  </div>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column label=\"操作\" align=\"center\" width=\"280\">\r\n                <template v-slot=\"scope\">\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"primary\"\r\n                    v-if=\"scope.row.status === '待收货'\"\r\n                    plain\r\n                    @click=\"updateStatus(scope.row, '已完成')\"\r\n                    >确认收货</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"primary\"\r\n                    v-if=\"scope.row.status === '已完成'\"\r\n                    plain\r\n                    @click=\"addComment(scope.row)\"\r\n                    >评价</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"warning\"\r\n                    plain\r\n                    @click=\"handleReturn(scope.row)\"\r\n                    v-if=\"\r\n                      (scope.row.status === '已完成' ||\r\n                        scope.row.status === '已评价') &&\r\n                      (!scope.row.returnStatus ||\r\n                        scope.row.returnStatus === '0')\r\n                    \"\r\n                    >申请退换</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"danger\"\r\n                    plain\r\n                    @click=\"del(scope.row.id)\"\r\n                    >删除</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"primary\"\r\n                    v-if=\"\r\n                      scope.row.status === '待支付' ||\r\n                      scope.row.payStatus === '未支付'\r\n                    \"\r\n                    plain\r\n                    @click=\"payWithAlipay(scope.row)\"\r\n                    >立即支付</el-button\r\n                  >\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n\r\n            <div class=\"pagination\" style=\"margin-top: 20px\">\r\n              <el-pagination\r\n                background\r\n                @current-change=\"handleCurrentChange\"\r\n                :current-page=\"pageNum\"\r\n                :page-sizes=\"[5, 10, 20]\"\r\n                :page-size=\"pageSize\"\r\n                layout=\"total, prev, pager, next\"\r\n                :total=\"total\"\r\n              >\r\n              </el-pagination>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <el-dialog\r\n      title=\"请输入评价内容\"\r\n      :visible.sync=\"fromVisible\"\r\n      width=\"40%\"\r\n      :close-on-click-modal=\"false\"\r\n      destroy-on-close\r\n    >\r\n      <el-form\r\n        :model=\"form\"\r\n        label-width=\"100px\"\r\n        style=\"padding-right: 50px\"\r\n        :rules=\"rules\"\r\n        ref=\"formRef\"\r\n      >\r\n        <el-form-item label=\"评价内容\" prop=\"username\">\r\n          <el-input\r\n            type=\"textarea\"\r\n            v-model=\"form.content\"\r\n            placeholder=\"请输入评价内容\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"fromVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || \"{}\"),\r\n      ordersData: [],\r\n      pageNum: 1, // 当前的页码\r\n      pageSize: 10, // 每页显示的个数\r\n      total: 0,\r\n      form: {},\r\n      fromVisible: false,\r\n      loading: false,\r\n      rules: {}, // 添加缺少的rules属性\r\n      currentPayingOrderId: null,\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadOrders(1);\r\n\r\n    // 添加对$bus的检查\r\n    if (this.$bus) {\r\n      this.$bus.$on(\"refreshOrders\", () => {\r\n        this.loadOrders(this.pageNum);\r\n      });\r\n    } else {\r\n      console.error(\"事件总线($bus)未初始化\");\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // 添加对$bus的检查\r\n    if (this.$bus) {\r\n      this.$bus.$off(\"refreshOrders\");\r\n    }\r\n  },\r\n  // methods：本页面所有的点击事件或者其他函数定义区\r\n  methods: {\r\n    loadOrders(pageNum) {\r\n      if (pageNum) this.pageNum = pageNum;\r\n\r\n      // 显示加载状态\r\n      this.loading = true;\r\n\r\n      this.$request\r\n        .get(\"/orders/selectPage\", {\r\n          params: {\r\n            pageNum: this.pageNum,\r\n            pageSize: this.pageSize,\r\n            userId: this.user.id,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          this.loading = false;\r\n          if (res.code === \"200\") {\r\n            this.ordersData = res.data?.list || [];\r\n            console.log(\"原始订单数据:\", JSON.stringify(this.ordersData));\r\n\r\n            // 检查订单ID字段\r\n            this.ordersData.forEach((order, index) => {\r\n              // 输出每个订单的所有字段，查找订单ID字段\r\n              console.log(`订单${index}的所有字段:`, Object.keys(order));\r\n\r\n              // 检查并修复orderId字段\r\n              if (!order.orderId && order.order_id) {\r\n                order.orderId = order.order_id;\r\n                console.log(\r\n                  `修复订单ID: 使用order_id(${order.order_id})替代orderId`\r\n                );\r\n              }\r\n\r\n              // 其他处理逻辑\r\n            });\r\n\r\n            // 确保returnStatus字段被正确转换为字符串\r\n            this.ordersData.forEach((order) => {\r\n              if (order.returnStatus !== undefined) {\r\n                order.returnStatus = order.returnStatus.toString();\r\n              } else {\r\n                // 如果returnStatus不存在，设置默认值为\"0\"\r\n                order.returnStatus = \"0\";\r\n              }\r\n\r\n              // 添加日志查看每个订单的状态\r\n              console.log(\r\n                `订单ID: ${order.orderId}, 状态: ${order.status}, 退款状态: ${order.returnStatus}`\r\n              );\r\n\r\n              // 添加这部分以检查支付状态\r\n              console.log(\r\n                `订单ID: ${order.orderId}, 状态: ${order.status}, 支付状态: ${order.payStatus}`\r\n              );\r\n            });\r\n\r\n            this.total = res.data?.total || 0;\r\n            console.log(\"加载的订单数据总数:\", this.ordersData.length);\r\n          } else {\r\n            this.$message.error(res.msg || \"获取订单数据失败\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.loading = false;\r\n          console.error(\"加载订单失败:\", err);\r\n          this.$message.error(\r\n            \"获取订单数据失败: \" + (err.message || \"未知错误\")\r\n          );\r\n        });\r\n    },\r\n    navTo(url) {\r\n      location.href = url;\r\n    },\r\n    del(id) {\r\n      this.$request.delete(\"/orders/delete/\" + id).then((res) => {\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"删除成功\");\r\n          this.loadOrders(1);\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.loadOrders(pageNum);\r\n    },\r\n    updateStatus(row, status) {\r\n      this.form = row;\r\n      this.form.status = status;\r\n      this.$request.put(\"/orders/update\", this.form).then((res) => {\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"操作成功\");\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    addComment(row) {\r\n      this.fromVisible = true;\r\n      this.form = row;\r\n    },\r\n    save() {\r\n      let data = {\r\n        userId: this.user.id,\r\n        businessId: this.form.businessId,\r\n        goodsId: this.form.goodsId,\r\n        content: this.form.content,\r\n      };\r\n      this.$request.post(\"/comment/add\", data).then((res) => {\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"评价成功\");\r\n          this.fromVisible = false;\r\n          this.updateStatus(this.form, \"已评价\");\r\n          this.form = {};\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    handleReturn(row) {\r\n      console.log(\"准备跳转到退换申请页面\");\r\n      console.log(\"订单数据:\", row);\r\n\r\n      // 确保orderId不为空\r\n      if (!row.orderId) {\r\n        this.$message.error(\"订单ID不能为空，无法申请退换\");\r\n        return;\r\n      }\r\n\r\n      // 使用window.location.href直接跳转\r\n      const query = {\r\n        orderId: row.orderId || \"\",\r\n        goodsId: row.goodsId || \"\",\r\n        goodsName: row.goodsName || \"\",\r\n        goodsImg: row.goodsImg || \"\",\r\n        goodsPrice: row.goodsPrice || 0,\r\n      };\r\n\r\n      console.log(\"跳转参数:\", query);\r\n\r\n      const queryString = Object.entries(query)\r\n        .map(([key, value]) => `${key}=${encodeURIComponent(value || \"\")}`)\r\n        .join(\"&\");\r\n\r\n      window.location.href = `/front/return/apply?${queryString}`;\r\n    },\r\n    payWithAlipay(row) {\r\n      console.log(\"开始支付流程，订单数据:\", row);\r\n      const orderId = row.orderId;\r\n      const amount = row.price;\r\n\r\n      // 保存当前支付的订单ID\r\n      this.currentPayingOrderId = orderId;\r\n\r\n      // 显示加载中提示\r\n      const loading = this.$loading({\r\n        lock: true,\r\n        text: \"正在获取支付表单...\",\r\n        spinner: \"el-icon-loading\",\r\n        background: \"rgba(0,0,0,0.7)\",\r\n      });\r\n\r\n      this.$request\r\n        .post(\"/api/alipay/pay\", {\r\n          orderId: orderId,\r\n          amount: amount,\r\n          subject: \"订单支付-\" + orderId,\r\n        })\r\n        .then((res) => {\r\n          loading.close(); // 关闭加载提示\r\n          console.log(\"支付接口返回:\", res);\r\n          if (res.code === \"200\") {\r\n            try {\r\n              // 方法1: 创建隐藏DIV显示表单并提交\r\n              const tempDiv = document.createElement(\"div\");\r\n              tempDiv.style.position = \"fixed\";\r\n              tempDiv.style.visibility = \"hidden\";\r\n              document.body.appendChild(tempDiv);\r\n              tempDiv.innerHTML = res.data;\r\n\r\n              console.log(\"生成的表单内容:\", tempDiv.innerHTML);\r\n\r\n              // 查找表单\r\n              const form = tempDiv.querySelector(\"form\");\r\n              if (form) {\r\n                console.log(\"找到支付表单, 准备提交\");\r\n\r\n                // 确保按钮可见\r\n                const submitBtn = form.querySelector('input[type=\"submit\"]');\r\n                if (submitBtn) {\r\n                  submitBtn.style.display = \"block\";\r\n                }\r\n\r\n                // 由于已知支付宝沙箱可能有问题，直接使用内嵌表单显示\r\n                this.showFormInPage(res.data);\r\n\r\n                /* 注释原有的直接跳转代码，改用内嵌表单\r\n                // 在新窗口中打开支付表单\r\n                this.openPayForm(form);\r\n                */\r\n              } else {\r\n                // 方法2: 尝试执行内嵌脚本\r\n                const scriptContent = res.data.match(\r\n                  /<script>(.*?)<\\/script>/s\r\n                );\r\n                if (scriptContent && scriptContent[1]) {\r\n                  console.log(\"找到脚本内容，尝试执行\");\r\n\r\n                  // 使用内嵌表单代替脚本执行\r\n                  this.showFormInPage(res.data);\r\n                } else {\r\n                  // 方法3: 最后的方法 - 直接在页面嵌入表单\r\n                  this.showFormInPage(res.data);\r\n                }\r\n              }\r\n            } catch (e) {\r\n              console.error(\"处理支付表单出错:\", e);\r\n              // 直接显示在页面上\r\n              this.showFormInPage(res.data);\r\n            }\r\n          } else {\r\n            this.$message.error(res.msg || \"创建支付失败\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          loading.close();\r\n          console.error(\"支付请求错误:\", err);\r\n          this.$message.error(\"支付请求失败: \" + (err.message || \"未知错误\"));\r\n        });\r\n    },\r\n\r\n    // 在页面上直接显示表单\r\n    showFormInPage(formHtml) {\r\n      // 创建一个模态框显示表单\r\n      const overlay = document.createElement(\"div\");\r\n      overlay.style.position = \"fixed\";\r\n      overlay.style.top = \"0\";\r\n      overlay.style.left = \"0\";\r\n      overlay.style.width = \"100%\";\r\n      overlay.style.height = \"100%\";\r\n      overlay.style.backgroundColor = \"rgba(0,0,0,0.5)\";\r\n      overlay.style.zIndex = \"9999\";\r\n      overlay.style.display = \"flex\";\r\n      overlay.style.justifyContent = \"center\";\r\n      overlay.style.alignItems = \"center\";\r\n\r\n      const modal = document.createElement(\"div\");\r\n      modal.style.backgroundColor = \"#fff\";\r\n      modal.style.padding = \"20px\";\r\n      modal.style.borderRadius = \"5px\";\r\n      modal.style.maxWidth = \"500px\";\r\n      modal.style.width = \"90%\";\r\n      modal.style.maxHeight = \"80vh\";\r\n      modal.style.overflow = \"auto\";\r\n\r\n      const header = document.createElement(\"div\");\r\n      header.style.display = \"flex\";\r\n      header.style.justifyContent = \"space-between\";\r\n      header.style.marginBottom = \"20px\";\r\n\r\n      const title = document.createElement(\"h3\");\r\n      title.textContent = \"支付宝支付\";\r\n      title.style.margin = \"0\";\r\n\r\n      const closeBtn = document.createElement(\"button\");\r\n      closeBtn.textContent = \"×\";\r\n      closeBtn.style.background = \"none\";\r\n      closeBtn.style.border = \"none\";\r\n      closeBtn.style.fontSize = \"20px\";\r\n      closeBtn.style.cursor = \"pointer\";\r\n      closeBtn.onclick = () => document.body.removeChild(overlay);\r\n\r\n      header.appendChild(title);\r\n      header.appendChild(closeBtn);\r\n\r\n      const content = document.createElement(\"div\");\r\n      content.innerHTML = formHtml;\r\n\r\n      // 添加网关错误提示\r\n      const errorNote = document.createElement(\"div\");\r\n      errorNote.style.margin = \"10px 0\";\r\n      errorNote.style.padding = \"10px\";\r\n      errorNote.style.backgroundColor = \"#FFF7E6\";\r\n      errorNote.style.border = \"1px solid #FFD591\";\r\n      errorNote.style.borderRadius = \"4px\";\r\n      errorNote.style.color = \"#D46B08\";\r\n      errorNote.style.fontSize = \"14px\";\r\n      errorNote.innerHTML =\r\n        '<strong>提示：</strong>支付宝沙箱环境可能出现\"502 Bad Gateway\"错误，这是支付宝服务器问题，不影响系统功能测试。';\r\n\r\n      // 添加到内容前面\r\n      modal.appendChild(header);\r\n      modal.appendChild(errorNote);\r\n      modal.appendChild(content);\r\n\r\n      // 确保提交按钮可见\r\n      const submitBtn = content.querySelector('input[type=\"submit\"]');\r\n      if (submitBtn) {\r\n        submitBtn.style.display = \"block\";\r\n        submitBtn.style.margin = \"10px auto\";\r\n        submitBtn.style.padding = \"8px 15px\";\r\n        submitBtn.style.backgroundColor = \"#409EFF\";\r\n        submitBtn.style.color = \"#fff\";\r\n        submitBtn.style.border = \"none\";\r\n        submitBtn.style.borderRadius = \"4px\";\r\n        submitBtn.style.cursor = \"pointer\";\r\n\r\n        // 替换原始按钮 - 防止直接跳转导致502\r\n        const payBtn = document.createElement(\"button\");\r\n        payBtn.textContent = \"模拟支付完成\";\r\n        payBtn.style.margin = \"10px auto\";\r\n        payBtn.style.padding = \"8px 15px\";\r\n        payBtn.style.backgroundColor = \"#67C23A\";\r\n        payBtn.style.color = \"#fff\";\r\n        payBtn.style.border = \"none\";\r\n        payBtn.style.borderRadius = \"4px\";\r\n        payBtn.style.cursor = \"pointer\";\r\n        payBtn.style.display = \"block\";\r\n\r\n        // 点击模拟支付按钮\r\n        payBtn.onclick = () => {\r\n          // 显示支付中\r\n          const loadingInstance = this.$loading({\r\n            lock: true,\r\n            text: \"正在处理支付...\",\r\n            spinner: \"el-icon-loading\",\r\n            background: \"rgba(0, 0, 0, 0.7)\",\r\n          });\r\n\r\n          // 模拟支付完成过程\r\n          setTimeout(() => {\r\n            loadingInstance.close();\r\n            document.body.removeChild(overlay);\r\n            this.$message.success(\"支付模拟完成，订单状态已更新\");\r\n\r\n            // 修改当前订单状态\r\n            const currentOrder = this.ordersData.find(\r\n              (order) => order.orderId === this.currentPayingOrderId\r\n            );\r\n            if (currentOrder) {\r\n              currentOrder.status = \"待发货\";\r\n              currentOrder.payStatus = \"已支付\";\r\n              // 更新后端\r\n              this.updateStatus(currentOrder, \"待发货\");\r\n            }\r\n\r\n            // 刷新订单列表\r\n            this.loadOrders(this.pageNum);\r\n          }, 2000);\r\n        };\r\n\r\n        // 将模拟按钮添加到表单区域\r\n        content.appendChild(payBtn);\r\n      }\r\n\r\n      overlay.appendChild(modal);\r\n      document.body.appendChild(overlay);\r\n\r\n      // 设置刷新检查器\r\n      this.createRefreshChecker();\r\n    },\r\n\r\n    // 创建定时刷新检查器\r\n    createRefreshChecker() {\r\n      // 设置定时器，每隔一段时间刷新订单列表，检查订单是否已支付\r\n      const checkInterval = 5000; // 5秒检查一次\r\n      const maxChecks = 12; // 最多检查12次（约1分钟）\r\n      let checkCount = 0;\r\n\r\n      const checkPaymentStatus = setInterval(() => {\r\n        checkCount++;\r\n        console.log(`第${checkCount}次检查订单支付状态`);\r\n\r\n        // 刷新订单列表\r\n        this.loadOrders(this.pageNum);\r\n\r\n        // 如果达到最大检查次数，停止检查\r\n        if (checkCount >= maxChecks) {\r\n          clearInterval(checkPaymentStatus);\r\n          console.log(\"已完成订单状态检查\");\r\n        }\r\n      }, checkInterval);\r\n    },\r\n\r\n    // 显示支付宝网关错误提示\r\n    showGatewayErrorTip() {\r\n      this.$alert(\r\n        \"支付宝沙箱环境暂时不可用，出现了502 Bad Gateway错误。这是支付宝沙箱服务器的问题，不影响系统功能测试。在实际生产环境中不会出现此问题。\",\r\n        \"支付网关暂时不可用\",\r\n        {\r\n          confirmButtonText: \"我知道了\",\r\n          type: \"warning\",\r\n          callback: () => {\r\n            this.$message({\r\n              type: \"info\",\r\n              message: \"您可以稍后再试，或者继续测试系统的其他功能\",\r\n            });\r\n          },\r\n        }\r\n      );\r\n    },\r\n\r\n    // 在新窗口中打开支付表单\r\n    openPayForm(form) {\r\n      try {\r\n        // 先显示提示\r\n        this.$message.success(\"正在跳转到支付页面，请稍等...\");\r\n\r\n        // 添加错误处理函数 - 当支付页面加载失败时执行\r\n        window.addEventListener(\r\n          \"error\",\r\n          (event) => {\r\n            if (\r\n              event.target.tagName === \"IFRAME\" ||\r\n              event.target.tagName === \"IMG\"\r\n            ) {\r\n              if (event.target.src && event.target.src.includes(\"alipay\")) {\r\n                console.error(\"支付宝页面加载失败:\", event);\r\n                this.showGatewayErrorTip();\r\n                return true; // 阻止默认处理\r\n              }\r\n            }\r\n          },\r\n          true\r\n        );\r\n\r\n        // 在新窗口中打开并提交表单\r\n        form.target = \"_blank\";\r\n        setTimeout(() => {\r\n          form.submit();\r\n\r\n          // 5秒后提示用户可能的网关错误\r\n          setTimeout(() => {\r\n            this.showGatewayErrorTip();\r\n          }, 5000);\r\n        }, 500);\r\n\r\n        // 创建刷新检查定时器\r\n        this.createRefreshChecker();\r\n      } catch (e) {\r\n        console.error(\"打开支付表单失败:\", e);\r\n        this.$message.error(\"打开支付页面失败: \" + e.message);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.pay-form-container {\r\n  min-height: 300px;\r\n  max-height: 500px;\r\n  overflow-y: auto;\r\n  padding: 10px;\r\n}\r\n</style>\r\n\r\n<style>\r\n/* 全局样式，确保跨组件生效 */\r\n.pay-dialog .el-dialog__body {\r\n  padding: 10px;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}