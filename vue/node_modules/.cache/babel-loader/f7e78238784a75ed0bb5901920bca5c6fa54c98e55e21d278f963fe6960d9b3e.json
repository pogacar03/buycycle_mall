{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\nimport { Message } from 'element-ui';\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: 'http://localhost:9090',\n  // 注意这里要匹配你的后端接口地址\n  timeout: 30000 // 请求超时时间，AI请求可能需要更长时间，所以设置30秒\n});\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8';\n\n  // 从localStorage获取token\n  const user = localStorage.getItem('xm-user');\n  if (user) {\n    const token = JSON.parse(user).token;\n    if (token) {\n      config.headers['token'] = token; // 设置请求头\n    }\n  }\n  return config;\n}, error => {\n  console.error('请求拦截器错误：', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n\n  // 如果是文件下载的请求，直接返回\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n\n  // 处理自定义错误码\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  // 处理成功响应\n  if (res.code === 200) {\n    return res;\n  }\n\n  // 处理token过期\n  if (res.code === '401') {\n    Message.error('登录已过期，请重新登录');\n    router.push('/login');\n    return Promise.reject(res.msg);\n  }\n\n  // 处理其他错误\n  Message.error(res.msg || '系统错误');\n  return Promise.reject(res);\n}, error => {\n  console.error('响应拦截器错误：', error);\n\n  // 处理网络错误\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        Message.error('登录已过期，请重新登录');\n        router.push('/login');\n        break;\n      case 403:\n        Message.error('没有权限访问');\n        break;\n      case 404:\n        Message.error('请求的资源不存在');\n        break;\n      case 500:\n        Message.error('服务器内部错误');\n        break;\n      default:\n        Message.error('网络错误：' + error.message);\n    }\n  } else if (error.request) {\n    Message.error('服务器无响应');\n  } else {\n    Message.error('请求配置错误：' + error.message);\n  }\n  return Promise.reject(error);\n});\n\n// 导出实例\nexport default request;","map":{"version":3,"names":["axios","router","Message","request","create","baseURL","timeout","interceptors","use","config","headers","user","localStorage","getItem","token","JSON","parse","error","console","Promise","reject","response","res","data","responseType","code","push","msg","status","message"],"sources":["E:/learnjava/final-java/Online-shopping-mall/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\nimport { Message } from 'element-ui'\r\n\r\n// 创建axios实例\r\nconst request = axios.create({\r\n    baseURL: 'http://localhost:9090',  // 注意这里要匹配你的后端接口地址\r\n    timeout: 30000  // 请求超时时间，AI请求可能需要更长时间，所以设置30秒\r\n})\r\n\r\n// 请求拦截器\r\nrequest.interceptors.request.use(\r\n    config => {\r\n        config.headers['Content-Type'] = 'application/json;charset=utf-8';\r\n        \r\n        // 从localStorage获取token\r\n        const user = localStorage.getItem('xm-user');\r\n        if (user) {\r\n            const token = JSON.parse(user).token;\r\n            if (token) {\r\n                config.headers['token'] = token;  // 设置请求头\r\n            }\r\n        }\r\n        \r\n        return config;\r\n    }, \r\n    error => {\r\n        console.error('请求拦截器错误：', error);\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 响应拦截器\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n        \r\n        // 如果是文件下载的请求，直接返回\r\n        if (response.config.responseType === 'blob') {\r\n            return res;\r\n        }\r\n        \r\n        // 处理自定义错误码\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res;\r\n        }\r\n        \r\n        // 处理成功响应\r\n        if (res.code === 200) {\r\n            return res;\r\n        }\r\n        \r\n        // 处理token过期\r\n        if (res.code === '401') {\r\n            Message.error('登录已过期，请重新登录');\r\n            router.push('/login');\r\n            return Promise.reject(res.msg);\r\n        }\r\n        \r\n        // 处理其他错误\r\n        Message.error(res.msg || '系统错误');\r\n        return Promise.reject(res);\r\n        \r\n    },\r\n    error => {\r\n        console.error('响应拦截器错误：', error);\r\n        \r\n        // 处理网络错误\r\n        if (error.response) {\r\n            switch (error.response.status) {\r\n                case 401:\r\n                    Message.error('登录已过期，请重新登录');\r\n                    router.push('/login');\r\n                    break;\r\n                case 403:\r\n                    Message.error('没有权限访问');\r\n                    break;\r\n                case 404:\r\n                    Message.error('请求的资源不存在');\r\n                    break;\r\n                case 500:\r\n                    Message.error('服务器内部错误');\r\n                    break;\r\n                default:\r\n                    Message.error('网络错误：' + error.message);\r\n            }\r\n        } else if (error.request) {\r\n            Message.error('服务器无响应');\r\n        } else {\r\n            Message.error('请求配置错误：' + error.message);\r\n        }\r\n        \r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// 导出实例\r\nexport default request"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}