{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nexport default {\n  name: \"FrontLayout\",\n  data() {\n    return {\n      top: '',\n      notice: [],\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\n      showAIDialog: false,\n      question: '',\n      chatHistory: [],\n      loading: false\n    };\n  },\n  mounted() {\n    this.loadNotice();\n  },\n  methods: {\n    // ... 保持原有的其他方法不变 ...\n\n    sendQuestion() {\n      if (!this.question.trim()) {\n        this.$message.warning('请输入问题');\n        return;\n      }\n\n      // 将用户问题添加到聊天记录\n      this.chatHistory.push({\n        content: this.question,\n        type: 'user'\n      });\n\n      // 添加加载状态消息\n      const loadingMsgIndex = this.chatHistory.length;\n      this.chatHistory.push({\n        content: '正在思考...',\n        type: 'loading'\n      });\n      console.log('发送问题到后端:', this.question);\n\n      // 设置较长的超时时间并改进错误处理\n      this.$request.post('/ai/ask', {\n        question: this.question\n      }, {\n        timeout: 60000\n      }).then(res => {\n        console.log('收到后端响应:', res);\n\n        // 移除加载状态消息\n        this.chatHistory.splice(loadingMsgIndex, 1);\n        if (res.code === 200 || res.code === '200') {\n          // 将AI回答添加到聊天记录\n          this.chatHistory.push({\n            content: res.answer || '抱歉，未能获取到回答',\n            type: 'ai'\n          });\n        } else {\n          // 处理错误响应\n          this.chatHistory.push({\n            content: `抱歉，出现错误: ${res.msg || '未知错误'}`,\n            type: 'ai'\n          });\n          console.error('AI响应错误:', res);\n        }\n      }).catch(error => {\n        console.error('AI请求错误:', error);\n\n        // 移除加载状态消息\n        this.chatHistory.splice(loadingMsgIndex, 1);\n\n        // 添加错误消息到聊天记录\n        this.chatHistory.push({\n          content: `抱歉，请求失败: ${error.message || '网络错误，请稍后再试'}`,\n          type: 'ai'\n        });\n      }).finally(() => {\n        // 清空输入框并滚动到底部\n        this.question = '';\n        this.$nextTick(() => {\n          const chatContainer = this.$refs.chatContainer;\n          if (chatContainer) {\n            chatContainer.scrollTop = chatContainer.scrollHeight;\n          }\n        });\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","top","notice","user","JSON","parse","localStorage","getItem","showAIDialog","question","chatHistory","loading","mounted","loadNotice","methods","sendQuestion","trim","$message","warning","push","content","type","loadingMsgIndex","length","console","log","$request","post","timeout","then","res","splice","code","answer","msg","error","catch","message","finally","$nextTick","chatContainer","$refs","scrollTop","scrollHeight"],"sources":["src/views/Front.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    \r\n\r\n    <!-- AI 客服按钮 -->\r\n    <el-button \r\n      type=\"primary\" \r\n      @click=\"showAIDialog = true\" \r\n      class=\"ai-service-btn\">\r\n      <i class=\"el-icon-service\"></i> AI 客服\r\n    </el-button>\r\n\r\n    <!-- AI 客服对话框 -->\r\n    <el-dialog \r\n      :visible.sync=\"showAIDialog\" \r\n      title=\"AI 智能客服\" \r\n      width=\"50%\"\r\n      :close-on-click-modal=\"false\">\r\n      <div class=\"ai-chat-container\">\r\n        <!-- 聊天记录区域 -->\r\n        <div class=\"chat-messages\" ref=\"chatContainer\">\r\n          <div v-if=\"chatHistory.length === 0\" class=\"welcome-message\">\r\n            您好！我是BuyCycle的AI客服助手，请问有什么可以帮您？\r\n          </div>\r\n          <div v-for=\"(msg, index) in chatHistory\" \r\n               :key=\"index\" \r\n               :class=\"['message', msg.type]\">\r\n            <div class=\"message-content\">{{ msg.content }}</div>\r\n          </div>\r\n        </div>\r\n        \r\n        <!-- 输入区域 -->\r\n        <div class=\"chat-input\">\r\n          <el-input\r\n            v-model=\"question\"\r\n            type=\"textarea\"\r\n            :rows=\"3\"\r\n            placeholder=\"请输入您的问题\"\r\n            @keyup.enter.native.exact=\"sendQuestion\"\r\n          ></el-input>\r\n          <el-button \r\n            type=\"primary\" \r\n            @click=\"sendQuestion\"\r\n            :loading=\"loading\"\r\n            style=\"margin-top: 10px\">\r\n            {{ loading ? '正在思考...' : '发送' }}\r\n          </el-button>\r\n        </div>\r\n      </div>\r\n    </el-dialog>\r\n\r\n    <!--主体-->\r\n    <div class=\"main-body\">\r\n      <router-view ref=\"child\" @update:user=\"updateUser\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"FrontLayout\",\r\n\r\n  data() {\r\n    return {\r\n      top: '',\r\n      notice: [],\r\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || '{}'),\r\n      showAIDialog: false,\r\n      question: '',\r\n      chatHistory: [],\r\n      loading: false\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.loadNotice()\r\n  },\r\n\r\n  methods: {\r\n    // ... 保持原有的其他方法不变 ...\r\n\r\n    sendQuestion() {\r\n      if (!this.question.trim()) {\r\n        this.$message.warning('请输入问题');\r\n        return;\r\n      }\r\n\r\n      // 将用户问题添加到聊天记录\r\n      this.chatHistory.push({\r\n        content: this.question,\r\n        type: 'user'\r\n      });\r\n\r\n      // 添加加载状态消息\r\n      const loadingMsgIndex = this.chatHistory.length;\r\n      this.chatHistory.push({\r\n        content: '正在思考...',\r\n        type: 'loading'\r\n      });\r\n\r\n      console.log('发送问题到后端:', this.question);\r\n\r\n      // 设置较长的超时时间并改进错误处理\r\n      this.$request.post('/ai/ask', { question: this.question }, { timeout: 60000 })\r\n        .then(res => {\r\n          console.log('收到后端响应:', res);\r\n          \r\n          // 移除加载状态消息\r\n          this.chatHistory.splice(loadingMsgIndex, 1);\r\n\r\n          if (res.code === 200 || res.code === '200') {\r\n            // 将AI回答添加到聊天记录\r\n            this.chatHistory.push({\r\n              content: res.answer || '抱歉，未能获取到回答',\r\n              type: 'ai'\r\n            });\r\n          } else {\r\n            // 处理错误响应\r\n            this.chatHistory.push({\r\n              content: `抱歉，出现错误: ${res.msg || '未知错误'}`,\r\n              type: 'ai'\r\n            });\r\n            console.error('AI响应错误:', res);\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.error('AI请求错误:', error);\r\n          \r\n          // 移除加载状态消息\r\n          this.chatHistory.splice(loadingMsgIndex, 1);\r\n          \r\n          // 添加错误消息到聊天记录\r\n          this.chatHistory.push({\r\n            content: `抱歉，请求失败: ${error.message || '网络错误，请稍后再试'}`,\r\n            type: 'ai'\r\n          });\r\n        })\r\n        .finally(() => {\r\n          // 清空输入框并滚动到底部\r\n          this.question = '';\r\n          this.$nextTick(() => {\r\n            const chatContainer = this.$refs.chatContainer;\r\n            if (chatContainer) {\r\n              chatContainer.scrollTop = chatContainer.scrollHeight;\r\n            }\r\n          });\r\n        });\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n@import \"@/assets/css/front.css\";\r\n\r\n/* AI客服相关样式 */\r\n.ai-service-btn {\r\n  position: fixed;\r\n  bottom: 20px;\r\n  right: 20px;\r\n  z-index: 999;\r\n  border-radius: 50%;\r\n  width: 60px;\r\n  height: 60px;\r\n  padding: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: column;\r\n  font-size: 12px;\r\n}\r\n\r\n.ai-service-btn i {\r\n  font-size: 24px;\r\n  margin-bottom: 2px;\r\n}\r\n\r\n.ai-chat-container {\r\n  height: 500px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.chat-messages {\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  background: #f5f7fa;\r\n  border-radius: 4px;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.welcome-message {\r\n  text-align: center;\r\n  color: #909399;\r\n  padding: 20px;\r\n}\r\n\r\n.message {\r\n  margin-bottom: 15px;\r\n  display: flex;\r\n  flex-direction: column;\r\n}\r\n\r\n.message.user {\r\n  align-items: flex-end;\r\n}\r\n\r\n.message.ai {\r\n  align-items: flex-start;\r\n}\r\n\r\n.message-content {\r\n  max-width: 80%;\r\n  padding: 10px 15px;\r\n  border-radius: 4px;\r\n  word-break: break-word;\r\n}\r\n\r\n.user .message-content {\r\n  background: #409EFF;\r\n  color: white;\r\n  border-radius: 15px 15px 0 15px;\r\n}\r\n\r\n.ai .message-content {\r\n  background: white;\r\n  color: #333;\r\n  border-radius: 15px 15px 15px 0;\r\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\r\n}\r\n\r\n.chat-input {\r\n  padding: 10px 0;\r\n}\r\n</style>"],"mappings":";AA2DA;EACAA,IAAA;EAEAC,KAAA;IACA;MACAC,GAAA;MACAC,MAAA;MACAC,IAAA,EAAAC,IAAA,CAAAC,KAAA,CAAAC,YAAA,CAAAC,OAAA;MACAC,YAAA;MACAC,QAAA;MACAC,WAAA;MACAC,OAAA;IACA;EACA;EAEAC,QAAA;IACA,KAAAC,UAAA;EACA;EAEAC,OAAA;IACA;;IAEAC,aAAA;MACA,UAAAN,QAAA,CAAAO,IAAA;QACA,KAAAC,QAAA,CAAAC,OAAA;QACA;MACA;;MAEA;MACA,KAAAR,WAAA,CAAAS,IAAA;QACAC,OAAA,OAAAX,QAAA;QACAY,IAAA;MACA;;MAEA;MACA,MAAAC,eAAA,QAAAZ,WAAA,CAAAa,MAAA;MACA,KAAAb,WAAA,CAAAS,IAAA;QACAC,OAAA;QACAC,IAAA;MACA;MAEAG,OAAA,CAAAC,GAAA,kBAAAhB,QAAA;;MAEA;MACA,KAAAiB,QAAA,CAAAC,IAAA;QAAAlB,QAAA,OAAAA;MAAA;QAAAmB,OAAA;MAAA,GACAC,IAAA,CAAAC,GAAA;QACAN,OAAA,CAAAC,GAAA,YAAAK,GAAA;;QAEA;QACA,KAAApB,WAAA,CAAAqB,MAAA,CAAAT,eAAA;QAEA,IAAAQ,GAAA,CAAAE,IAAA,YAAAF,GAAA,CAAAE,IAAA;UACA;UACA,KAAAtB,WAAA,CAAAS,IAAA;YACAC,OAAA,EAAAU,GAAA,CAAAG,MAAA;YACAZ,IAAA;UACA;QACA;UACA;UACA,KAAAX,WAAA,CAAAS,IAAA;YACAC,OAAA,cAAAU,GAAA,CAAAI,GAAA;YACAb,IAAA;UACA;UACAG,OAAA,CAAAW,KAAA,YAAAL,GAAA;QACA;MACA,GACAM,KAAA,CAAAD,KAAA;QACAX,OAAA,CAAAW,KAAA,YAAAA,KAAA;;QAEA;QACA,KAAAzB,WAAA,CAAAqB,MAAA,CAAAT,eAAA;;QAEA;QACA,KAAAZ,WAAA,CAAAS,IAAA;UACAC,OAAA,cAAAe,KAAA,CAAAE,OAAA;UACAhB,IAAA;QACA;MACA,GACAiB,OAAA;QACA;QACA,KAAA7B,QAAA;QACA,KAAA8B,SAAA;UACA,MAAAC,aAAA,QAAAC,KAAA,CAAAD,aAAA;UACA,IAAAA,aAAA;YACAA,aAAA,CAAAE,SAAA,GAAAF,aAAA,CAAAG,YAAA;UACA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}