{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from \"@/router\";\nimport { Message } from 'element-ui'; // 添加 Element UI 的消息提示\n\n// 创建可一个新的axios对象\nconst request = axios.create({\n  baseURL: process.env.VUE_APP_BASEURL,\n  // 后端的接口地址  ip:port\n  timeout: 30000 // 减少为10s请求超时\n});\n\n// request 拦截器\n// 可以自请求发送前对请求做一些处理\n// 比如统一加token，对请求参数统一加密\nrequest.interceptors.request.use(config => {\n  config.headers['Content-Type'] = 'application/json;charset=utf-8'; // 设置请求头格式\n\n  // 获取缓存的用户信息\n  let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}');\n  if (user.token) {\n    config.headers['token'] = user.token; // 设置请求头\n  }\n  return config;\n}, error => {\n  console.error('request error: ' + error); // for debug\n  Message.error('请求配置错误：' + error.message);\n  return Promise.reject(error);\n});\n\n// response 拦截器\n// 可以在接口响应后统一处理结果\nrequest.interceptors.response.use(response => {\n  let res = response.data;\n\n  // 如果是文件下载，直接返回\n  if (response.config.responseType === 'blob') {\n    return res;\n  }\n\n  // 兼容服务端返回的字符串数据\n  if (typeof res === 'string') {\n    res = res ? JSON.parse(res) : res;\n  }\n\n  // 处理token过期\n  if (res.code === '401') {\n    Message.error('登录已过期，请重新登录');\n    router.push('/login');\n    return Promise.reject('未登录或登录过期');\n  }\n\n  // 处理其他错误\n  if (res.code !== 200 && res.code !== '200') {\n    // 根据错误码显示具体的错误信息\n    const errorMessages = {\n      '5001': '用户名已存在',\n      '5002': '用户未登录',\n      '5003': '账号或密码错误',\n      '5004': '用户不存在',\n      '5005': '原密码输入错误',\n      '5007': '角色不存在',\n      '4001': '参数缺失，请检查输入',\n      '400': '参数异常，请检查输入',\n      '500': '系统异常，请稍后重试'\n    };\n    const errorMessage = errorMessages[res.code] || res.msg || '系统错误';\n    console.log('错误响应:', res.code, errorMessage);\n    Message.error(errorMessage);\n    return Promise.reject(res);\n  }\n  return res;\n}, error => {\n  console.error('response error: ' + error); // for debug\n\n  // 处理超时错误\n  if (error.message.includes('timeout')) {\n    Message.error('请求超时，请检查网络连接');\n    return Promise.reject(error);\n  }\n\n  // 处理网络错误\n  if (error.response) {\n    const res = error.response.data;\n    console.log('错误状态:', error.response.status, '错误数据:', res);\n\n    // 根据错误码显示具体的错误信息\n    const errorMessages = {\n      '5001': '用户名已存在',\n      '5002': '用户未登录',\n      '5003': '账号或密码错误',\n      '5004': '用户不存在',\n      '5005': '原密码输入错误',\n      '5007': '角色不存在',\n      '4001': '参数缺失，请检查输入',\n      '400': '参数异常，请检查输入',\n      '500': '系统异常，请稍后重试'\n    };\n    const errorMessage = errorMessages[res.code] || res.msg || '系统错误';\n    Message.error(errorMessage);\n    switch (error.response.status) {\n      case 401:\n        router.push('/login');\n        break;\n      case 403:\n        break;\n      case 404:\n        break;\n      case 500:\n        break;\n      default:\n        break;\n    }\n    return Promise.reject(error);\n  } else {\n    Message.error('网络错误，请检查网络连接');\n    return Promise.reject(error);\n  }\n});\nexport default request;","map":{"version":3,"names":["axios","router","Message","request","create","baseURL","process","env","VUE_APP_BASEURL","timeout","interceptors","use","config","headers","user","JSON","parse","localStorage","getItem","token","error","console","message","Promise","reject","response","res","data","responseType","code","push","errorMessages","errorMessage","msg","log","includes","status"],"sources":["E:/learnjava/final-java/Online-shopping-mall/vue/src/utils/request.js"],"sourcesContent":["import axios from 'axios'\r\nimport router from \"@/router\";\r\nimport { Message } from 'element-ui'  // 添加 Element UI 的消息提示\r\n\r\n// 创建可一个新的axios对象\r\nconst request = axios.create({\r\n    baseURL: process.env.VUE_APP_BASEURL,   // 后端的接口地址  ip:port\r\n    timeout: 30000                        // 减少为10s请求超时\r\n})\r\n\r\n// request 拦截器\r\n// 可以自请求发送前对请求做一些处理\r\n// 比如统一加token，对请求参数统一加密\r\nrequest.interceptors.request.use(config => {\r\n    config.headers['Content-Type'] = 'application/json;charset=utf-8';        // 设置请求头格式\r\n\r\n    // 获取缓存的用户信息\r\n    let user = JSON.parse(localStorage.getItem(\"xm-user\") || '{}')\r\n    if (user.token) {\r\n        config.headers['token'] = user.token  // 设置请求头\r\n    }\r\n\r\n    return config\r\n}, error => {\r\n    console.error('request error: ' + error) // for debug\r\n    Message.error('请求配置错误：' + error.message)\r\n    return Promise.reject(error)\r\n});\r\n\r\n// response 拦截器\r\n// 可以在接口响应后统一处理结果\r\nrequest.interceptors.response.use(\r\n    response => {\r\n        let res = response.data;\r\n\r\n        // 如果是文件下载，直接返回\r\n        if (response.config.responseType === 'blob') {\r\n            return res;\r\n        }\r\n\r\n        // 兼容服务端返回的字符串数据\r\n        if (typeof res === 'string') {\r\n            res = res ? JSON.parse(res) : res\r\n        }\r\n\r\n        // 处理token过期\r\n        if (res.code === '401') {\r\n            Message.error('登录已过期，请重新登录')\r\n            router.push('/login')\r\n            return Promise.reject('未登录或登录过期')\r\n        }\r\n\r\n        // 处理其他错误\r\n        if (res.code !== 200 && res.code !== '200') {\r\n            // 根据错误码显示具体的错误信息\r\n            const errorMessages = {\r\n                '5001': '用户名已存在',\r\n                '5002': '用户未登录',\r\n                '5003': '账号或密码错误',\r\n                '5004': '用户不存在',\r\n                '5005': '原密码输入错误',\r\n                '5007': '角色不存在',\r\n                '4001': '参数缺失，请检查输入',\r\n                '400': '参数异常，请检查输入',\r\n                '500': '系统异常，请稍后重试'\r\n            };\r\n\r\n            const errorMessage = errorMessages[res.code] || res.msg || '系统错误';\r\n            console.log('错误响应:', res.code, errorMessage);\r\n            Message.error(errorMessage);\r\n            return Promise.reject(res);\r\n        }\r\n\r\n        return res;\r\n    },\r\n    error => {\r\n        console.error('response error: ' + error) // for debug\r\n\r\n        // 处理超时错误\r\n        if (error.message.includes('timeout')) {\r\n            Message.error('请求超时，请检查网络连接')\r\n            return Promise.reject(error)\r\n        }\r\n\r\n        // 处理网络错误\r\n        if (error.response) {\r\n            const res = error.response.data;\r\n            console.log('错误状态:', error.response.status, '错误数据:', res);\r\n\r\n            // 根据错误码显示具体的错误信息\r\n            const errorMessages = {\r\n                '5001': '用户名已存在',\r\n                '5002': '用户未登录',\r\n                '5003': '账号或密码错误',\r\n                '5004': '用户不存在',\r\n                '5005': '原密码输入错误',\r\n                '5007': '角色不存在',\r\n                '4001': '参数缺失，请检查输入',\r\n                '400': '参数异常，请检查输入',\r\n                '500': '系统异常，请稍后重试'\r\n            };\r\n\r\n            const errorMessage = errorMessages[res.code] || res.msg || '系统错误';\r\n            Message.error(errorMessage);\r\n\r\n            switch (error.response.status) {\r\n                case 401:\r\n                    router.push('/login')\r\n                    break\r\n                case 403:\r\n                    break\r\n                case 404:\r\n                    break\r\n                case 500:\r\n                    break\r\n                default:\r\n                    break\r\n            }\r\n            return Promise.reject(error);\r\n        } else {\r\n            Message.error('网络错误，请检查网络连接');\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n)\r\n\r\nexport default request"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}