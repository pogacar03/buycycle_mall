{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nexport default {\n  data() {\n    return {\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || \"{}\"),\n      ordersData: [],\n      pageNum: 1,\n      // 当前的页码\n      pageSize: 10,\n      // 每页显示的个数\n      total: 0,\n      form: {},\n      fromVisible: false,\n      loading: false,\n      rules: {},\n      // 添加缺少的rules属性\n      payFormVisible: false,\n      // 支付表单弹窗是否可见\n      payFormHtml: \"\",\n      // 支付表单HTML内容\n      showDirectForm: false // 是否直接显示表单HTML\n    };\n  },\n  mounted() {\n    this.loadOrders(1);\n\n    // 添加对$bus的检查\n    if (this.$bus) {\n      this.$bus.$on(\"refreshOrders\", () => {\n        this.loadOrders(this.pageNum);\n      });\n    } else {\n      console.error(\"事件总线($bus)未初始化\");\n    }\n  },\n  beforeDestroy() {\n    // 添加对$bus的检查\n    if (this.$bus) {\n      this.$bus.$off(\"refreshOrders\");\n    }\n  },\n  // methods：本页面所有的点击事件或者其他函数定义区\n  methods: {\n    loadOrders(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n\n      // 显示加载状态\n      this.loading = true;\n      this.$request.get(\"/orders/selectPage\", {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          userId: this.user.id\n        }\n      }).then(res => {\n        this.loading = false;\n        if (res.code === \"200\") {\n          this.ordersData = res.data?.list || [];\n          console.log(\"原始订单数据:\", JSON.stringify(this.ordersData));\n\n          // 检查订单ID字段\n          this.ordersData.forEach((order, index) => {\n            // 输出每个订单的所有字段，查找订单ID字段\n            console.log(`订单${index}的所有字段:`, Object.keys(order));\n\n            // 检查并修复orderId字段\n            if (!order.orderId && order.order_id) {\n              order.orderId = order.order_id;\n              console.log(`修复订单ID: 使用order_id(${order.order_id})替代orderId`);\n            }\n\n            // 其他处理逻辑\n          });\n\n          // 确保returnStatus字段被正确转换为字符串\n          this.ordersData.forEach(order => {\n            if (order.returnStatus !== undefined) {\n              order.returnStatus = order.returnStatus.toString();\n            } else {\n              // 如果returnStatus不存在，设置默认值为\"0\"\n              order.returnStatus = \"0\";\n            }\n\n            // 添加日志查看每个订单的状态\n            console.log(`订单ID: ${order.orderId}, 状态: ${order.status}, 退款状态: ${order.returnStatus}`);\n\n            // 添加这部分以检查支付状态\n            console.log(`订单ID: ${order.orderId}, 状态: ${order.status}, 支付状态: ${order.payStatus}`);\n          });\n          this.total = res.data?.total || 0;\n          console.log(\"加载的订单数据总数:\", this.ordersData.length);\n        } else {\n          this.$message.error(res.msg || \"获取订单数据失败\");\n        }\n      }).catch(err => {\n        this.loading = false;\n        console.error(\"加载订单失败:\", err);\n        this.$message.error(\"获取订单数据失败: \" + (err.message || \"未知错误\"));\n      });\n    },\n    navTo(url) {\n      location.href = url;\n    },\n    del(id) {\n      this.$request.delete(\"/orders/delete/\" + id).then(res => {\n        if (res.code === \"200\") {\n          this.$message.success(\"删除成功\");\n          this.loadOrders(1);\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    handleCurrentChange(pageNum) {\n      this.loadOrders(pageNum);\n    },\n    updateStatus(row, status) {\n      this.form = row;\n      this.form.status = status;\n      this.$request.put(\"/orders/update\", this.form).then(res => {\n        if (res.code === \"200\") {\n          this.$message.success(\"操作成功\");\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    addComment(row) {\n      this.fromVisible = true;\n      this.form = row;\n    },\n    save() {\n      let data = {\n        userId: this.user.id,\n        businessId: this.form.businessId,\n        goodsId: this.form.goodsId,\n        content: this.form.content\n      };\n      this.$request.post(\"/comment/add\", data).then(res => {\n        if (res.code === \"200\") {\n          this.$message.success(\"评价成功\");\n          this.fromVisible = false;\n          this.updateStatus(this.form, \"已评价\");\n          this.form = {};\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    handleReturn(row) {\n      console.log(\"准备跳转到退换申请页面\");\n      console.log(\"订单数据:\", row);\n\n      // 确保orderId不为空\n      if (!row.orderId) {\n        this.$message.error(\"订单ID不能为空，无法申请退换\");\n        return;\n      }\n\n      // 使用window.location.href直接跳转\n      const query = {\n        orderId: row.orderId || \"\",\n        goodsId: row.goodsId || \"\",\n        goodsName: row.goodsName || \"\",\n        goodsImg: row.goodsImg || \"\",\n        goodsPrice: row.goodsPrice || 0\n      };\n      console.log(\"跳转参数:\", query);\n      const queryString = Object.entries(query).map(([key, value]) => `${key}=${encodeURIComponent(value || \"\")}`).join(\"&\");\n      window.location.href = `/front/return/apply?${queryString}`;\n    },\n    payWithAlipay(row) {\n      console.log(\"开始支付流程，订单数据:\", row);\n      const orderId = row.orderId;\n      const amount = row.price;\n      this.$request.post(\"/api/alipay/pay\", {\n        orderId: orderId,\n        amount: amount,\n        subject: \"订单支付-\" + orderId\n      }).then(res => {\n        console.log(\"支付接口返回:\", res);\n        if (res.code === \"200\") {\n          try {\n            // 直接解析接口返回的表单字符串\n            this.payFormHtml = res.data;\n            this.showDirectForm = true;\n            this.payFormVisible = true;\n\n            // 在下一个事件循环中确保DOM已更新，然后尝试自动提交表单\n            this.$nextTick(() => {\n              // 自动点击提交按钮\n              const formElement = document.querySelector(\".direct-form-container form\");\n              if (formElement) {\n                console.log(\"找到支付表单，准备自动提交\");\n                // 尝试找到表单中的提交按钮并触发点击\n                const submitButton = formElement.querySelector('input[type=\"submit\"]');\n                if (submitButton) {\n                  submitButton.style.display = \"block\"; // 显示默认隐藏的按钮\n                  // 可以选择自动点击或让用户手动点击\n                  // submitButton.click(); // 自动点击\n                }\n\n                // 监听表单提交完成后的状态变化\n                window.addEventListener(\"message\", event => {\n                  // 如果是支付完成的消息\n                  if (event.data === \"PAYMENT_SUCCESS\") {\n                    this.payFormVisible = false;\n                    this.loadOrders(this.pageNum);\n                    this.$message.success(\"支付完成，正在刷新订单状态\");\n                  }\n                });\n              }\n            });\n          } catch (e) {\n            console.error(\"表单处理错误:\", e);\n            this.$message.error(\"支付表单处理失败: \" + e.message);\n          }\n        } else {\n          this.$message.error(res.msg || \"创建支付失败\");\n        }\n      }).catch(err => {\n        console.error(\"支付请求错误:\", err);\n        this.$message.error(\"支付请求失败: \" + (err.message || \"未知错误\"));\n      });\n    },\n    // 添加手动提交表单方法\n    submitPayForm() {\n      try {\n        // 查找表单并提交\n        const formElement = document.querySelector(\".direct-form-container form\");\n        if (formElement) {\n          formElement.submit();\n          this.$message.info(\"表单已提交，请完成支付流程\");\n        } else {\n          this.$message.error(\"未找到支付表单，请刷新重试\");\n        }\n      } catch (e) {\n        console.error(\"手动提交表单错误:\", e);\n        this.$message.error(\"提交表单失败: \" + e.message);\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","user","JSON","parse","localStorage","getItem","ordersData","pageNum","pageSize","total","form","fromVisible","loading","rules","payFormVisible","payFormHtml","showDirectForm","mounted","loadOrders","$bus","$on","console","error","beforeDestroy","$off","methods","$request","get","params","userId","id","then","res","code","list","log","stringify","forEach","order","index","Object","keys","orderId","order_id","returnStatus","undefined","toString","status","payStatus","length","$message","msg","catch","err","message","navTo","url","location","href","del","delete","success","handleCurrentChange","updateStatus","row","put","addComment","save","businessId","goodsId","content","post","handleReturn","query","goodsName","goodsImg","goodsPrice","queryString","entries","map","key","value","encodeURIComponent","join","window","payWithAlipay","amount","price","subject","$nextTick","formElement","document","querySelector","submitButton","style","display","addEventListener","event","e","submitPayForm","submit","info"],"sources":["src/views/front/Orders.vue"],"sourcesContent":["<template>\r\n  <div class=\"main-content\">\r\n    <div\r\n      style=\"\r\n        width: 80%;\r\n        background-color: white;\r\n        margin: 30px auto;\r\n        border-radius: 20px;\r\n      \"\r\n    >\r\n      <div style=\"padding-bottom: 10px\">\r\n        <div\r\n          style=\"\r\n            font-size: 18px;\r\n            color: #000000ff;\r\n            line-height: 80px;\r\n            border-bottom: #cccccc 1px solid;\r\n          \"\r\n        >\r\n          <div style=\"margin-left: 20px\">\r\n            我的订单（{{ ordersData.length }} 个）\r\n          </div>\r\n        </div>\r\n        <div style=\"margin: 20px 0; padding: 0 50px\">\r\n          <div class=\"table\">\r\n            <el-table :data=\"ordersData\" stripe v-loading=\"loading\">\r\n              <el-table-column label=\"商品图片\" width=\"120px\">\r\n                <template v-slot=\"scope\">\r\n                  <el-image\r\n                    style=\"width: 80px; height: 60px; border-radius: 3px\"\r\n                    v-if=\"scope.row.goodsImg\"\r\n                    :src=\"scope.row.goodsImg\"\r\n                    :preview-src-list=\"[scope.row.goodsImg]\"\r\n                  ></el-image>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column\r\n                prop=\"orderId\"\r\n                label=\"订单编号\"\r\n              ></el-table-column>\r\n              <el-table-column\r\n                prop=\"goodsName\"\r\n                label=\"商品名称\"\r\n                :show-overflow-tooltip=\"true\"\r\n              >\r\n                <template v-slot=\"scope\">\r\n                  <a :href=\"'/front/detail?id=' + scope.row.goodsId\">{{\r\n                    scope.row.goodsName\r\n                  }}</a>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"businessName\" label=\"店铺名称\">\r\n                <template v-slot=\"scope\">\r\n                  <a :href=\"'/front/business?id=' + scope.row.businessId\">{{\r\n                    scope.row.businessName\r\n                  }}</a>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"goodsPrice\" label=\"商品价格\">\r\n                <template v-slot=\"scope\">\r\n                  {{ scope.row.goodsPrice }} / {{ scope.row.goodsUnit }}\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column prop=\"num\" label=\"商品数量\"></el-table-column>\r\n              <el-table-column prop=\"price\" label=\"订单总价\"></el-table-column>\r\n              <el-table-column prop=\"username\" label=\"收货人\"></el-table-column>\r\n              <el-table-column\r\n                prop=\"useraddress\"\r\n                label=\"收货地址\"\r\n              ></el-table-column>\r\n              <el-table-column prop=\"phone\" label=\"联系电话\"></el-table-column>\r\n              <el-table-column prop=\"status\" label=\"订单状态\">\r\n                <template v-slot=\"scope\">\r\n                  <!-- 基本订单状态 -->\r\n                  <span>{{ scope.row.status }}</span>\r\n\r\n                  <!-- 退款/退货状态标签 -->\r\n                  <div style=\"margin-top: 5px\">\r\n                    <el-tag type=\"warning\" v-if=\"scope.row.returnStatus === '1'\"\r\n                      >退换处理中</el-tag\r\n                    >\r\n                    <el-tag type=\"success\" v-if=\"scope.row.returnStatus === '2'\"\r\n                      >退换已完成</el-tag\r\n                    >\r\n                  </div>\r\n                </template>\r\n              </el-table-column>\r\n              <el-table-column label=\"操作\" align=\"center\" width=\"280\">\r\n                <template v-slot=\"scope\">\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"primary\"\r\n                    v-if=\"scope.row.status === '待收货'\"\r\n                    plain\r\n                    @click=\"updateStatus(scope.row, '已完成')\"\r\n                    >确认收货</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"primary\"\r\n                    v-if=\"scope.row.status === '已完成'\"\r\n                    plain\r\n                    @click=\"addComment(scope.row)\"\r\n                    >评价</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"warning\"\r\n                    plain\r\n                    @click=\"handleReturn(scope.row)\"\r\n                    v-if=\"\r\n                      (scope.row.status === '已完成' ||\r\n                        scope.row.status === '已评价') &&\r\n                      (!scope.row.returnStatus ||\r\n                        scope.row.returnStatus === '0')\r\n                    \"\r\n                    >申请退换</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"danger\"\r\n                    plain\r\n                    @click=\"del(scope.row.id)\"\r\n                    >删除</el-button\r\n                  >\r\n                  <el-button\r\n                    size=\"mini\"\r\n                    type=\"primary\"\r\n                    v-if=\"\r\n                      scope.row.status === '待支付' ||\r\n                      scope.row.payStatus === '未支付'\r\n                    \"\r\n                    plain\r\n                    @click=\"payWithAlipay(scope.row)\"\r\n                    >立即支付</el-button\r\n                  >\r\n                </template>\r\n              </el-table-column>\r\n            </el-table>\r\n\r\n            <div class=\"pagination\" style=\"margin-top: 20px\">\r\n              <el-pagination\r\n                background\r\n                @current-change=\"handleCurrentChange\"\r\n                :current-page=\"pageNum\"\r\n                :page-sizes=\"[5, 10, 20]\"\r\n                :page-size=\"pageSize\"\r\n                layout=\"total, prev, pager, next\"\r\n                :total=\"total\"\r\n              >\r\n              </el-pagination>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <el-dialog\r\n      title=\"请输入评价内容\"\r\n      :visible.sync=\"fromVisible\"\r\n      width=\"40%\"\r\n      :close-on-click-modal=\"false\"\r\n      destroy-on-close\r\n    >\r\n      <el-form\r\n        :model=\"form\"\r\n        label-width=\"100px\"\r\n        style=\"padding-right: 50px\"\r\n        :rules=\"rules\"\r\n        ref=\"formRef\"\r\n      >\r\n        <el-form-item label=\"评价内容\" prop=\"username\">\r\n          <el-input\r\n            type=\"textarea\"\r\n            v-model=\"form.content\"\r\n            placeholder=\"请输入评价内容\"\r\n          ></el-input>\r\n        </el-form-item>\r\n      </el-form>\r\n\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"fromVisible = false\">取 消</el-button>\r\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\r\n      </div>\r\n    </el-dialog>\r\n    <el-dialog\r\n      title=\"支付表单\"\r\n      :visible.sync=\"payFormVisible\"\r\n      width=\"80%\"\r\n      :close-on-click-modal=\"false\"\r\n      destroy-on-close\r\n    >\r\n      <div class=\"pay-form\">\r\n        <iframe\r\n          id=\"pay-iframe\"\r\n          frameborder=\"0\"\r\n          style=\"width: 100%; height: 500px\"\r\n        ></iframe>\r\n        <!-- 如果iframe加载失败，直接显示表单HTML -->\r\n        <div\r\n          v-if=\"showDirectForm\"\r\n          class=\"direct-form-container\"\r\n          v-html=\"payFormHtml\"\r\n        ></div>\r\n      </div>\r\n      <div slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button @click=\"payFormVisible = false\">关闭</el-button>\r\n        <el-button type=\"primary\" @click=\"submitPayForm\"\r\n          >手动提交支付</el-button\r\n        >\r\n      </div>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      user: JSON.parse(localStorage.getItem(\"xm-user\") || \"{}\"),\r\n      ordersData: [],\r\n      pageNum: 1, // 当前的页码\r\n      pageSize: 10, // 每页显示的个数\r\n      total: 0,\r\n      form: {},\r\n      fromVisible: false,\r\n      loading: false,\r\n      rules: {}, // 添加缺少的rules属性\r\n      payFormVisible: false, // 支付表单弹窗是否可见\r\n      payFormHtml: \"\", // 支付表单HTML内容\r\n      showDirectForm: false, // 是否直接显示表单HTML\r\n    };\r\n  },\r\n  mounted() {\r\n    this.loadOrders(1);\r\n\r\n    // 添加对$bus的检查\r\n    if (this.$bus) {\r\n      this.$bus.$on(\"refreshOrders\", () => {\r\n        this.loadOrders(this.pageNum);\r\n      });\r\n    } else {\r\n      console.error(\"事件总线($bus)未初始化\");\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // 添加对$bus的检查\r\n    if (this.$bus) {\r\n      this.$bus.$off(\"refreshOrders\");\r\n    }\r\n  },\r\n  // methods：本页面所有的点击事件或者其他函数定义区\r\n  methods: {\r\n    loadOrders(pageNum) {\r\n      if (pageNum) this.pageNum = pageNum;\r\n\r\n      // 显示加载状态\r\n      this.loading = true;\r\n\r\n      this.$request\r\n        .get(\"/orders/selectPage\", {\r\n          params: {\r\n            pageNum: this.pageNum,\r\n            pageSize: this.pageSize,\r\n            userId: this.user.id,\r\n          },\r\n        })\r\n        .then((res) => {\r\n          this.loading = false;\r\n          if (res.code === \"200\") {\r\n            this.ordersData = res.data?.list || [];\r\n            console.log(\"原始订单数据:\", JSON.stringify(this.ordersData));\r\n\r\n            // 检查订单ID字段\r\n            this.ordersData.forEach((order, index) => {\r\n              // 输出每个订单的所有字段，查找订单ID字段\r\n              console.log(`订单${index}的所有字段:`, Object.keys(order));\r\n\r\n              // 检查并修复orderId字段\r\n              if (!order.orderId && order.order_id) {\r\n                order.orderId = order.order_id;\r\n                console.log(\r\n                  `修复订单ID: 使用order_id(${order.order_id})替代orderId`\r\n                );\r\n              }\r\n\r\n              // 其他处理逻辑\r\n            });\r\n\r\n            // 确保returnStatus字段被正确转换为字符串\r\n            this.ordersData.forEach((order) => {\r\n              if (order.returnStatus !== undefined) {\r\n                order.returnStatus = order.returnStatus.toString();\r\n              } else {\r\n                // 如果returnStatus不存在，设置默认值为\"0\"\r\n                order.returnStatus = \"0\";\r\n              }\r\n\r\n              // 添加日志查看每个订单的状态\r\n              console.log(\r\n                `订单ID: ${order.orderId}, 状态: ${order.status}, 退款状态: ${order.returnStatus}`\r\n              );\r\n\r\n              // 添加这部分以检查支付状态\r\n              console.log(\r\n                `订单ID: ${order.orderId}, 状态: ${order.status}, 支付状态: ${order.payStatus}`\r\n              );\r\n            });\r\n\r\n            this.total = res.data?.total || 0;\r\n            console.log(\"加载的订单数据总数:\", this.ordersData.length);\r\n          } else {\r\n            this.$message.error(res.msg || \"获取订单数据失败\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          this.loading = false;\r\n          console.error(\"加载订单失败:\", err);\r\n          this.$message.error(\r\n            \"获取订单数据失败: \" + (err.message || \"未知错误\")\r\n          );\r\n        });\r\n    },\r\n    navTo(url) {\r\n      location.href = url;\r\n    },\r\n    del(id) {\r\n      this.$request.delete(\"/orders/delete/\" + id).then((res) => {\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"删除成功\");\r\n          this.loadOrders(1);\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    handleCurrentChange(pageNum) {\r\n      this.loadOrders(pageNum);\r\n    },\r\n    updateStatus(row, status) {\r\n      this.form = row;\r\n      this.form.status = status;\r\n      this.$request.put(\"/orders/update\", this.form).then((res) => {\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"操作成功\");\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    addComment(row) {\r\n      this.fromVisible = true;\r\n      this.form = row;\r\n    },\r\n    save() {\r\n      let data = {\r\n        userId: this.user.id,\r\n        businessId: this.form.businessId,\r\n        goodsId: this.form.goodsId,\r\n        content: this.form.content,\r\n      };\r\n      this.$request.post(\"/comment/add\", data).then((res) => {\r\n        if (res.code === \"200\") {\r\n          this.$message.success(\"评价成功\");\r\n          this.fromVisible = false;\r\n          this.updateStatus(this.form, \"已评价\");\r\n          this.form = {};\r\n        } else {\r\n          this.$message.error(res.msg);\r\n        }\r\n      });\r\n    },\r\n    handleReturn(row) {\r\n      console.log(\"准备跳转到退换申请页面\");\r\n      console.log(\"订单数据:\", row);\r\n\r\n      // 确保orderId不为空\r\n      if (!row.orderId) {\r\n        this.$message.error(\"订单ID不能为空，无法申请退换\");\r\n        return;\r\n      }\r\n\r\n      // 使用window.location.href直接跳转\r\n      const query = {\r\n        orderId: row.orderId || \"\",\r\n        goodsId: row.goodsId || \"\",\r\n        goodsName: row.goodsName || \"\",\r\n        goodsImg: row.goodsImg || \"\",\r\n        goodsPrice: row.goodsPrice || 0,\r\n      };\r\n\r\n      console.log(\"跳转参数:\", query);\r\n\r\n      const queryString = Object.entries(query)\r\n        .map(([key, value]) => `${key}=${encodeURIComponent(value || \"\")}`)\r\n        .join(\"&\");\r\n\r\n      window.location.href = `/front/return/apply?${queryString}`;\r\n    },\r\n    payWithAlipay(row) {\r\n      console.log(\"开始支付流程，订单数据:\", row);\r\n      const orderId = row.orderId;\r\n      const amount = row.price;\r\n\r\n      this.$request\r\n        .post(\"/api/alipay/pay\", {\r\n          orderId: orderId,\r\n          amount: amount,\r\n          subject: \"订单支付-\" + orderId,\r\n        })\r\n        .then((res) => {\r\n          console.log(\"支付接口返回:\", res);\r\n          if (res.code === \"200\") {\r\n            try {\r\n              // 直接解析接口返回的表单字符串\r\n              this.payFormHtml = res.data;\r\n              this.showDirectForm = true;\r\n              this.payFormVisible = true;\r\n\r\n              // 在下一个事件循环中确保DOM已更新，然后尝试自动提交表单\r\n              this.$nextTick(() => {\r\n                // 自动点击提交按钮\r\n                const formElement = document.querySelector(\r\n                  \".direct-form-container form\"\r\n                );\r\n                if (formElement) {\r\n                  console.log(\"找到支付表单，准备自动提交\");\r\n                  // 尝试找到表单中的提交按钮并触发点击\r\n                  const submitButton = formElement.querySelector(\r\n                    'input[type=\"submit\"]'\r\n                  );\r\n                  if (submitButton) {\r\n                    submitButton.style.display = \"block\"; // 显示默认隐藏的按钮\r\n                    // 可以选择自动点击或让用户手动点击\r\n                    // submitButton.click(); // 自动点击\r\n                  }\r\n\r\n                  // 监听表单提交完成后的状态变化\r\n                  window.addEventListener(\"message\", (event) => {\r\n                    // 如果是支付完成的消息\r\n                    if (event.data === \"PAYMENT_SUCCESS\") {\r\n                      this.payFormVisible = false;\r\n                      this.loadOrders(this.pageNum);\r\n                      this.$message.success(\"支付完成，正在刷新订单状态\");\r\n                    }\r\n                  });\r\n                }\r\n              });\r\n            } catch (e) {\r\n              console.error(\"表单处理错误:\", e);\r\n              this.$message.error(\"支付表单处理失败: \" + e.message);\r\n            }\r\n          } else {\r\n            this.$message.error(res.msg || \"创建支付失败\");\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.error(\"支付请求错误:\", err);\r\n          this.$message.error(\"支付请求失败: \" + (err.message || \"未知错误\"));\r\n        });\r\n    },\r\n    // 添加手动提交表单方法\r\n    submitPayForm() {\r\n      try {\r\n        // 查找表单并提交\r\n        const formElement = document.querySelector(\r\n          \".direct-form-container form\"\r\n        );\r\n        if (formElement) {\r\n          formElement.submit();\r\n          this.$message.info(\"表单已提交，请完成支付流程\");\r\n        } else {\r\n          this.$message.error(\"未找到支付表单，请刷新重试\");\r\n        }\r\n      } catch (e) {\r\n        console.error(\"手动提交表单错误:\", e);\r\n        this.$message.error(\"提交表单失败: \" + e.message);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}