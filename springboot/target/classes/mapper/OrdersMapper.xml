<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.OrdersMapper">

    <sql id="Base_Column_List">
        id,user_id,business_id,goods_id,num,price,address_id,status,order_id,return_status,pay_status
    </sql>

    <select id="selectAll" resultType="com.example.entity.Orders">
        select orders.*, business.name as businessName, goods.img as goodsImg, goods.name as goodsName, goods.price as goodsPrice, goods.unit as goodsUnit,
        address.username as username, address.useraddress as useraddress, address.phone as phone,
        orders.return_status as returnStatus
        from orders
        left join business on orders.business_id = business.id
        left join goods on orders.goods_id = goods.id
        left join address on orders.address_id = address.id
        <where>
            <if test="id != null"> and id= #{id}</if>
            <if test="userId != null"> and orders.user_id = #{userId}</if>
            <if test="businessId != null"> and orders.business_id = #{businessId}</if>
            <if test="goodsId != null"> and goods_id = #{goodsId}</if>
            <if test="num != null"> and num = #{num}</if>
            <if test="price != null"> and price = #{price}</if>
            <if test="addressId != null"> and address_id = #{addressId}</if>
            <if test="status != null"> and status = #{status}</if>
            <if test="orderId != null"> and order_id = #{orderId}</if>
            <if test="returnStatus != null"> and return_status = #{returnStatus}</if>
        </where>
    </select>

    <select id="selectById" resultType="com.example.entity.Orders">
        select
        <include refid="Base_Column_List" />
        from orders
        where id = #{id}
    </select>

    <delete id="deleteById">
        delete from orders
        where  id = #{id}
    </delete>

    <insert id="insert" parameterType="com.example.entity.Orders" useGeneratedKeys="true">
        insert into orders
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">id,</if>
            <if test="userId != null">user_id,</if>
            <if test="businessId != null">business_id,</if>
            <if test="goodsId != null">goods_id,</if>
            <if test="num != null">num,</if>
            <if test="price != null">price,</if>
            <if test="addressId != null">address_id,</if>
            <if test="status != null">status,</if>
            <if test="orderId != null">order_id,</if>
            <if test="returnStatus != null">return_status,</if>
            <if test="payStatus != null">pay_status,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">#{id},</if>
            <if test="userId != null">#{userId},</if>
            <if test="businessId != null">#{businessId},</if>
            <if test="goodsId != null">#{goodsId},</if>
            <if test="num != null">#{num},</if>
            <if test="price != null">#{price},</if>
            <if test="addressId != null">#{addressId},</if>
            <if test="status != null">#{status},</if>
            <if test="orderId != null">#{orderId},</if>
            <if test="returnStatus != null">#{returnStatus},</if>
            <if test="payStatus != null">#{payStatus},</if>
        </trim>
    </insert>

    <update id="updateById" parameterType="com.example.entity.Orders">
        update orders
        <set>
            <if test="userId != null">
                user_id = #{userId},
            </if>
            <if test="businessId != null">
                business_id = #{businessId},
            </if>
            <if test="goodsId != null">
                goods_id = #{goodsId},
            </if>
            <if test="num != null">
                num = #{num},
            </if>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="addressId != null">
                address_id = #{addressId},
            </if>
            <if test="status != null">
                status = #{status},
            </if>
            <if test="orderId != null">
                order_id = #{orderId},
            </if>
            <if test="returnStatus != null">
                return_status = #{returnStatus},
            </if>
            <if test="payStatus != null">
                pay_status = #{payStatus},
            </if>
        </set>
        where id = #{id}
    </update>
    <select id="selectByOrderId" resultType="com.example.entity.Orders">
        SELECT
            o.*,
            g.name as goodsName,
            g.img as goodsImg,
            g.price as goodsPrice,
            g.unit as goodsUnit
        FROM orders o
                 LEFT JOIN goods g ON o.goods_id = g.id
        WHERE o.order_id = #{orderId}
    </select>
    <!-- 更新订单的退货状态 -->
    <update id="updateReturnStatus">
        UPDATE orders
        SET return_status = #{returnStatus}
        WHERE order_id = #{orderId}
    </update>
    <!-- 在 OrdersMapper.xml 中，确保 selectPage 查询包含 return_status 字段 -->
    <select id="selectPageByUserId" resultType="com.example.entity.Orders">
        SELECT orders.*,
               business.name as businessName,
               goods.img as goodsImg,
               goods.name as goodsName,
               goods.price as goodsPrice,
               goods.unit as goodsUnit,
               address.username as username,
               address.useraddress as useraddress,
               address.phone as phone,
               orders.return_status as returnStatus
        FROM orders
                 LEFT JOIN business ON orders.business_id = business.id
                 LEFT JOIN goods ON orders.goods_id = goods.id
                 LEFT JOIN address ON orders.address_id = address.id
        WHERE orders.user_id = #{userId}
        ORDER BY orders.id DESC
    </select>
    <select id="selectByUserId" resultType="java.util.Map">
        SELECT o.*, g.name as goodsName, g.img as goodsImg, g.price as goodsPrice, g.unit as goodsUnit,
               b.name as businessName, b.id as businessId,
               a.username, a.useraddress, a.phone,
               o.return_status as returnStatus
        FROM orders o
                 LEFT JOIN goods g ON o.goods_id = g.id
                 LEFT JOIN business b ON g.business_id = b.id
                 LEFT JOIN address a ON o.address_id = a.id
        WHERE o.user_id = #{userId}
        ORDER BY o.id DESC
    </select>
    <select id="selectByBusinessId" resultType="java.util.Map">
        SELECT o.*, g.name as goodsName, g.img as goodsImg, g.price as goodsPrice, g.unit as goodsUnit,
               u.username as username, u.name as userName,
               a.username as addressName, a.useraddress as useraddress, a.phone as phone,
               o.return_status as returnStatus
        FROM orders o
                 LEFT JOIN goods g ON o.goods_id = g.id
                 LEFT JOIN user u ON o.user_id = u.id
                 LEFT JOIN address a ON o.address_id = a.id
        WHERE g.business_id = #{businessId}
        ORDER BY o.id DESC
    </select>
    <select id="selectPageForBusiness" resultType="com.example.entity.Orders">
        SELECT o.*,
               g.name as goodsName, g.img as goodsImg, g.price as goodsPrice, g.unit as goodsUnit,
               u.username as username, u.name as userName,
               a.username as addressName, a.useraddress as useraddress, a.phone as phone,
               o.return_status as returnStatus
        FROM orders o
                 LEFT JOIN goods g ON o.goods_id = g.id
                 LEFT JOIN user u ON o.user_id = u.id
                 LEFT JOIN address a ON o.address_id = a.id
        WHERE g.business_id = #{businessId}
        ORDER BY o.id DESC
    </select>
    <select id="selectCount" resultType="java.lang.Integer">
        SELECT count(0) FROM orders o
        LEFT JOIN goods g ON o.goods_id = g.id
        LEFT JOIN business b ON g.business_id = b.id
        LEFT JOIN address a ON o.address_id = a.id
        <where>
            <if test="role != 'ADMIN'">
                <if test="role == 'USER'">
                    AND o.user_id = #{userId}
                </if>
                <if test="role == 'BUSINESS'">
                    AND g.business_id = #{userId}
                </if>
            </if>
            <if test="name != null and name != ''">
                AND g.name like concat('%', #{name}, '%')
            </if>
        </where>
    </select>
    <select id="selectPage" resultType="com.example.entity.Orders">
        SELECT o.*, g.name as goodsName, g.img as goodsImg, g.price as goodsPrice, g.unit as goodsUnit, 
               b.name as businessName, b.id as businessId, 
               a.username, a.phone, a.useraddress as useraddress,
               o.return_status as returnStatus
        FROM orders o
        LEFT JOIN goods g ON o.goods_id = g.id
        LEFT JOIN business b ON g.business_id = b.id
        LEFT JOIN address a ON o.address_id = a.id
        <where>
            <if test="role != 'ADMIN'">
                <if test="role == 'USER'">
                    AND o.user_id = #{userId}
                </if>
                <if test="role == 'BUSINESS'">
                    AND g.business_id = #{userId}
                </if>
            </if>
            <if test="name != null and name != ''">
                AND g.name like concat('%', #{name}, '%')
            </if>
        </where>
        ORDER BY o.id DESC
    </select>
</mapper>